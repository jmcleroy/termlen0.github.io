<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Network Automation</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2019-11-18T11:17:05-05:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Ajay Chenampara</name>
   <email></email>
 </author>

 
 <entry>
   <title>Ansible Custom Inventory Plugin - a hands-on, quick start guide</title>
   <link href="http://localhost:4000/2019/11/16/observations/"/>
   <updated>2019-11-16T00:00:00-05:00</updated>
   <id>http://localhost:4000/2019/11/16/observations</id>
   <content type="html">&lt;p&gt;This post shows you how to write a custom inventory plugin for Ansible. As usual, this is not a deep dive. If you are interested about what inventory plugins are or why you might want to use them. Please see &lt;a href=&quot;https://docs.ansible.com/ansible/latest/plugins/inventory.html&quot;&gt;the Ansible docs&lt;/a&gt;. Additionally for an in-depth understanding of inventories in general and inventory plugins in particular I highly recommend these videos:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ansible.com/ansible-inventory-for-fun-and-profit&quot;&gt;Ansible inventory for fun and profit&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/mattdavispdx&quot;&gt;@Matt Davis&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ansible.com/managing-meaningful-inventories&quot;&gt;Managing Meaningful Inventories&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/WillTome&quot;&gt;@Will Tome&lt;/a&gt; and &lt;a href=&quot;https://github.com/alancoding&quot;&gt;@Alan Rominger&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, this post describes &lt;em&gt;my&lt;/em&gt; workflow while building custom inventory plugins. This post is better consumed as a “do-it-along”.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h3 id=&quot;my-use-case&quot;&gt;My use case&lt;/h3&gt;

&lt;p&gt;As always we’ll being with a use case :). I have my inventory in a spreadsheet, and I want to use that as the source of truth for my Ansible playbooks. &lt;img src=&quot;/assets/myinventory.png&quot; alt=&quot;&quot; /&gt; Here’s a link to the CSV version of that spreadsheet: 
https://github.com/termlen0/custom-inventory-plugin/blob/master/csv_inventory/myinventory.csv&lt;/p&gt;

&lt;p&gt;We have devices from 2 datacenters in this spreadsheet. The file also describes the function the device performs and the platform type, that are of interest.&lt;/p&gt;

&lt;h3 id=&quot;step-1-write-a-simple-python-program&quot;&gt;Step 1: Write a simple Python program&lt;/h3&gt;
&lt;p&gt;Our first step is simply to write a Python program that returns the data in the CSV as a JSON object. Why? Because inventory plugins are required to be written in Python and we will use this simple code as the stepping stone for building out the logic in the custom inventory plugin. Here’s a link to the Python code that does this:&lt;/p&gt;

&lt;p&gt;Executing this locally as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;(ansible) ~/P/m/inventory_plugin » python csv2json.py 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Results in the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;MCOcore01&quot;: {
        &quot;Function&quot;: &quot;core&quot;, 
        &quot;Mgmt IP&quot;: &quot;10.141.1.114&quot;, 
        &quot;Device Name&quot;: &quot;MCOcore01&quot;, 
        &quot;Location&quot;: &quot;MCO&quot;, 
        &quot;Platform&quot;: &quot;junos&quot;
    }, 
    &quot;ORDaccess07&quot;: {
        &quot;Function&quot;: &quot;access&quot;, 
        &quot;Mgmt IP&quot;: &quot;10.122.1.128&quot;, 
        &quot;Device Name&quot;: &quot;ORDaccess07&quot;, 
        &quot;Location&quot;: &quot;ORD&quot;, 
        &quot;Platform&quot;: &quot;ios&quot;
    }
    
    ...
    ...
}

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;This code is a ripoff from &lt;a href=&quot;https://medium.com/@hannah15198/convert-csv-to-json-with-python-b8899c722f6d&quot;&gt;my first google search hit&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We now have a nice structured object with all our inventory information that we can plug into the inventory plugin!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE: This could be data coming back from an external source of truth rather than the CSV file&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-2-writing-the-custom-inventory-file&quot;&gt;Step 2: Writing the custom inventory file.&lt;/h3&gt;

&lt;p&gt;Now, we’ll start moving pieces from the above code into our custom inventory plugin. There are 2 parts to writing a custom inventory plugin:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;The inventory file&lt;/em&gt;: A YAML file that describes the plugin amongst other things&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;The plugin python file&lt;/em&gt;: A Python file that follows Ansible plugin requirements&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The inventory file, at the very least contains the name of the plugin. Think of this file as the &lt;em&gt;user interface&lt;/em&gt; for the Python file. This is where the consumer of your plugin can send instructions to the Python file. For our example let’s begin with the following file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
#csv_inventory.yaml

plugin: my_csv_plugin            # Name of the plugin
path_to_inventory: csv_inventory # Directory location of CSV
csv_file: myinventory.csv        # Name of the inventory file 


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/termlen0/custom-inventory-plugin/blob/master/csv_inventory.yaml&quot;&gt;Link&lt;/a&gt; to file in the repo.&lt;/p&gt;

&lt;p&gt;I’m calling this plugin, very creatively, &lt;code&gt;my_csv_plugin&lt;/code&gt;. I’m defining the location and filename of the CSV file, the plugin should parse, to generate the dynamic inventory. For a user of this plugin, this file allows them to customize these options (except the name).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE: This file is now the inventory input to the ansible-playbook command and therefore should follow the same rules of placement within the playbook directory&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Other  &lt;a href=&quot;https://docs.ansible.com/ansible/latest/plugins/inventory.html#using-inventory-plugins&quot;&gt;advanced options&lt;/a&gt; like &lt;code&gt;compose&lt;/code&gt; and &lt;code&gt;keyed_groups&lt;/code&gt; are also supported.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;step-3-onto-the-python-skeleton-code&quot;&gt;Step 3: Onto the Python Skeleton Code&lt;/h3&gt;

&lt;p&gt;The Ansible &lt;a href=&quot;https://docs.ansible.com/ansible/latest/dev_guide/developing_inventory.html&quot;&gt;developer guide&lt;/a&gt; provides us with skeleton code to get started. If you are following along, create a directory named &lt;code&gt;inventory_plugins&lt;/code&gt; and copy and paste the following code there.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#my_csv_plugin.py

from __future__ import (absolute_import, division, print_function)
__metaclass__ = type

DOCUMENTATION = r'''
    name: my_csv_plugin
    plugin_type: inventory
    short_description: Returns Ansible inventory from CSV
    description: Returns Ansible inventory from CSV
    options:
      plugin:
          description: Name of the plugin
          required: true
          choices: ['my_csv_plugin']
      path_to_inventory:
        description: Directory location of the CSV inventory
        required: true
      csv_file:
        description: File name of the CSV inventory file
        required: true
'''



from ansible.plugins.inventory import BaseInventoryPlugin
from ansible.errors import AnsibleError, AnsibleParserError



class InventoryModule(BaseInventoryPlugin):
    NAME = 'my_csv_plugin'


    def verify_file(self, path):
        '''Return true/false if this is possibly a valid file for this plugin to
consume

        '''
        pass
    
    def parse(self, inventory, loader, path, cache):
       '''Return dynamic inventory from source '''
       pass

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Key things to note:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;em&gt;DOCUMENTATION&lt;/em&gt; section is required and used by the plugin. Note how the options here reflect exactly the options we specified in the &lt;code&gt;csv_inventory.yaml&lt;/code&gt; file in the previous step.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;em&gt;NAME&lt;/em&gt; should exactly match the name of the plugin everywhere else.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For details on the imports and base classes/helpers, please watch the videos I linked at the top of this blog. (This is a quick start guide ;))&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, our playbook directory listing looks as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;.
├── csv2json.py
├── csv_inventory
│   └── myinventory.csv
├── csv_inventory.yaml
├── inventory_plugins
│   └── my_csv_plugin.py
└── README.md

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ansible expects the custom plugin to implement at least the &lt;code&gt;parse&lt;/code&gt; method and recommends the &lt;code&gt;verify_file&lt;/code&gt; method as a way to validate user input. So our 
job is to start building these.&lt;/p&gt;

&lt;h3 id=&quot;step-4-write-the-verify_file-method&quot;&gt;Step 4: Write the “verify_file” method.&lt;/h3&gt;

&lt;p&gt;This can be as simple or as complex as you’d like. Let’s keep things simple and make sure that the inventory YAML file name is one that’s acceptable to this plugin. Update the &lt;code&gt;verify_file&lt;/code&gt; method in our Python code to do that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# Update the verify_file method

    def verify_file(self, path):
        '''Return true/false if this is a 
        valid file for this plugin to consume
        '''
        valid = False
        if super(InventoryModule, self).verify_file(path):
            #base class verifies that file exists 
            #and is readable by current user
            if path.endswith(('csv_inventory.yaml',
                              'csv_inventory.yml')):
                valid = True
        return valid
        
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;step-5-write-the-parse-method&quot;&gt;Step 5: Write the “parse” method.&lt;/h3&gt;

&lt;p&gt;Here is the workflow I use to build the parse method:&lt;/p&gt;

&lt;h4 id=&quot;1-read-in-the-inventory-yaml-file-and-collect-the-options&quot;&gt;1. Read in the inventory YAML file and collect the options&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;    def parse(self, inventory, loader, path, cache):
       '''Return dynamic inventory from source '''
       super(InventoryModule, self).parse(inventory, loader, path, cache)
       # Read the inventory YAML file
       self._read_config_data(path)
       try:
           # Store the options from the YAML file
           self.plugin = self.get_option('plugin')
           self.inv_dir = self.get_option('path_to_inventory')
           self.inv_file = self.get_option('csv_file')
       except Exception as e:
           raise AnsibleParserError(
               'All correct options required: {}'.format(e))
       # Call our internal helper to populate the dynamic inventory
       self._populate()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last line above is calling an internal helper function that we are yet to write.&lt;/p&gt;

&lt;h4 id=&quot;2-define-the-helper-functions&quot;&gt;2. Define the helper function(s)&lt;/h4&gt;

&lt;p&gt;Add the &lt;code&gt;_populate()&lt;/code&gt; helper. As a learning step, let’s simply populate it with a debug checkpoint.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;    def _populate(self):
        '''Return the hosts and groups'''
        import pdb; pdb.set_trace()

    
    def parse(self, inventory, loader, path, cache):
       '''Return dynamic inventory from source '''
       super(InventoryModule, self).parse(inventory, loader, path, cache)
       # Read the inventory YAML file
       self._read_config_data(path)
       try:
           # Store the options from the YAML file
           self.plugin = self.get_option('plugin')
           self.inv_dir = self.get_option('path_to_inventory')
           self.inv_file = self.get_option('csv_file')
       except Exception as e:
           raise AnsibleParserError(
               'All correct options required: {}'.format(e))
       # Call our internal helper to populate the dynamic inventory
       self._populate()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let’s run the &lt;code&gt;ansible-inventory&lt;/code&gt; command to invoke the debugger and investigate the class object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;(ansible) ~/P/m/inventory_plugin » ansible-inventory -i csv_inventory.yaml --p
laybook-dir ./ --list

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should take you to the Python debugger REPL. Here you can use normal Python introspection to check the attributes of the class instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;(Pdb) self.inv_dir
u'csv_inventory'
(Pdb) self.inv_file
u'myinventory.csv'
(Pdb) self.plugin
u'my_csv_plugin'
(Pdb) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great! so we can see the options being sent into &lt;code&gt;_populate()&lt;/code&gt;. Now we can remove the debug checkpoint and bring in the code we wrote in our simple Python CSV to JSON converter. For our example, it can look something like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;    def _get_structured_inventory(self, inventory_file):
    
        #Initialize a dict
        inventory_data = {}
        #Read the CSV and add it to the dictionary
        with open(inventory_file, 'r') as fh:
            csvdict = csv.DictReader(fh)
            for rows in csvdict:
                hostname = rows['Device Name']
                inventory_data[hostname] = rows
        return inventory_data

    def _populate(self):
        '''Return the hosts and groups'''
        self.inventory_file = self.inv_dir + '/' + self.inv_file
        self.myinventory = self._get_structured_inventory(self.inventory_file)
        #import pdb; pdb.set_trace()
        return self.myinventory

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Use &lt;code&gt;pdb&lt;/code&gt; to set checkpoints along the way to know you are going in the right direction.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;NOTE: At this point import csv along with the other imports&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-build-out-the-parse-function&quot;&gt;3. Build out the parse function&lt;/h4&gt;

&lt;p&gt;Now that we see structured data coming back, we can start populating the group names and the hostnames. This is relatively straightforward in our example. We are going to create 3 groups.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;One based on the location of the device (First 3 characters = Airport code)&lt;/li&gt;
  &lt;li&gt;Two based on the function of the device and&lt;/li&gt;
  &lt;li&gt;Three, based on the platform type&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code&gt;_populate()&lt;/code&gt; function now looks as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;    def _populate(self):
        '''Return the hosts and groups'''
        self.inventory_file = self.inv_dir + '/' + self.inv_file
        self.myinventory = self._get_structured_inventory(self.inventory_file)
        #Create the location, function and platform  groups
        locations = []
        functions = []
        platforms = []
        for data in self.myinventory.values():
            if not data['Location'] in locations:
                locations.append(data['Location'])
            if not data['Function'] in functions:
                functions.append(data['Function'])
            if not data['Platform'] in platforms:
                platforms.append(data['Platform'])
        for location in locations:
            self.inventory.add_group(location)
        for function in functions:
            self.inventory.add_group(function)
        for platform in platforms:
            self.inventory.add_group(platform)
        #Add the hosts to the groups
        for hostname,data in self.myinventory.items():
            self.inventory.add_host(host=hostname, group=data['Location'])
            self.inventory.add_host(host=hostname, group=data['Function'])
            self.inventory.add_host(host=hostname, group=data['Platform'])

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we are taking advantage of the helpers from the base class that allow us to use the &lt;code&gt;add_group&lt;/code&gt; and &lt;code&gt;add_host&lt;/code&gt; methods to the inventory instance.&lt;/p&gt;

&lt;p&gt;You can now test this code by executing the &lt;code&gt;ansible-inventory&lt;/code&gt; command as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;(ansible) ~/P/m/inventory_plugin » ansible-inventory -i csv_inventory.yaml --playbook-dir ./ --graph                                                 master ✗
@all:
  |--@MCO:
  |  |--MCOaccess01
  |  |--MCOaccess02
  |  ...&amp;lt;omitted for brevity&amp;gt;
  |--@ORD:
  |  |--ORDaccess01
  |  |--ORDaccess02
  |  ...&amp;lt;omitted for brevity&amp;gt;
  |--@access:
  |  |--MCOaccess01
  |  |--MCOaccess02
  |  |--MCOaccess03
  |  ...&amp;lt;omitted for brevity&amp;gt;
  |  |--ORDaccess01
  |  |--ORDaccess02
  |  |--ORDaccess03
  |  ...&amp;lt;omitted for brevity&amp;gt;
  |--@aggregation:
  |  |--MCOagg01
  |  |--MCOagg02
  |  |--MCOagg03
  |  |--MCOagg04
  |  |--ORDagg01
  |  |--ORDagg02
  |  |--ORDagg03
  |  |--ORDagg04
  |--@core:
  |  |--MCOcore01
  |  |--MCOcore02
  |  |--ORDcore01
  |  |--ORDcore02
  |--@distribution:
  |  |--MCOdist01
  |  |--MCOdist02
  |  |--ORDdist01
  |  |--ORDdist02
  |--@eos:
  |  |--MCOaccess02
  |  |--MCOaccess04
  |  |--MCOaccess05
  |  |--MCOaccess10
  |  |--MCOagg01
  |  |--MCOagg02
  |  |--MCOagg03
  |  |--MCOagg04
  |  |--MCOdist01
  |  |--MCOdist02
  |--@ios:
  |  |--MCOaccess01
  |  |--MCOaccess07
  |  |--MCOaccess08
  |  |--ORDaccess01
  |  |--ORDaccess02
  |  |--ORDaccess04
  |  |--ORDaccess05
  |  |--ORDaccess07
  |  |--ORDaccess08
  |  |--ORDaccess10
  |  |--ORDcore01
  |  |--ORDcore02
  |--@junos:
  |  |--MCOcore01
  |  |--MCOcore02
  |--@nxos:
  |  |--MCOaccess03
  |  |--MCOaccess06
  |  |--MCOaccess09
  |  |--ORDaccess03
  |  |--ORDaccess06
  |  |--ORDaccess09
  |  |--ORDagg01
  |  |--ORDagg02
  |  |--ORDagg03
  |  |--ORDagg04
  |  |--ORDdist01
  |  |--ORDdist02
  |--@ungrouped:
(ansible) ~/P/m/inventory_plugin »                           
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Everything appears neatly grouped correctly. Next we can add the variables like &lt;code&gt;ansible_network_os&lt;/code&gt; and &lt;code&gt;ansible_host&lt;/code&gt; for the hosts.&lt;/p&gt;

&lt;p&gt;Alternately, try the &lt;code&gt;--list&lt;/code&gt; option&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;(ansible) ~/P/m/inventory_plugin » ansible-inventory -i csv_inventory.yaml --playbook-dir ./ --list
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;4-adding-the-host-variables&quot;&gt;4. Adding the host variables&lt;/h4&gt;

&lt;p&gt;Finally, let’s update the code to add the &lt;code&gt;ansible_host&lt;/code&gt; and the &lt;code&gt;ansible_network_os&lt;/code&gt; variable using the &lt;code&gt;Mgmt IP&lt;/code&gt; an &lt;code&gt;Platform&lt;/code&gt; from the spreadsheet, respectively.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;
    def _populate(self):
        '''Return the hosts and groups'''
        self.inventory_file = self.inv_dir + '/' + self.inv_file
        self.myinventory = self._get_structured_inventory(self.inventory_file)
        #Create the location, function and platform  groups
        locations = []
        functions = []
        platforms = []
        for data in self.myinventory.values():
            if not data['Location'] in locations:
                locations.append(data['Location'])
            if not data['Function'] in functions:
                functions.append(data['Function'])
            if not data['Platform'] in platforms:
                platforms.append(data['Platform'])
        for location in locations:
            self.inventory.add_group(location)
        for function in functions:
            self.inventory.add_group(function)
        for platform in platforms:
            self.inventory.add_group(platform)
        #Add the hosts to the groups
        for hostname,data in self.myinventory.items():
            self.inventory.add_host(host=hostname, group=data['Location'])
            self.inventory.add_host(host=hostname, group=data['Function'])
            self.inventory.add_host(host=hostname, group=data['Platform'])
            self.inventory.set_variable(hostname, 'ansible_host', data['Mgmt IP'])
            self.inventory.set_variable(hostname, 'ansible_network_os', data['Platform'])
            
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;The final Python file should look like : https://github.com/termlen0/custom-inventory-plugin/blob/master/inventory_plugins/my_csv_plugin.py&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This results in the hostvars being added as follows.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;        &quot;hostvars&quot;: {                           
            &quot;MCOaccess01&quot;: {               
                &quot;ansible_host&quot;: &quot;10.141.1.141&quot;, 
                &quot;ansible_network_os&quot;: &quot;ios&quot;
            },                                  
            &quot;MCOaccess02&quot;: {               
                &quot;ansible_host&quot;: &quot;10.141.1.123&quot;, 
                &quot;ansible_network_os&quot;: &quot;eos&quot; 
            },                                  
            &quot;MCOaccess03&quot;: {                 
                &quot;ansible_host&quot;: &quot;10.141.1.124&quot;, 
                &quot;ansible_network_os&quot;: &quot;nxos&quot;
            },                                  
            &quot;MCOaccess04&quot;: {                 
                &quot;ansible_host&quot;: &quot;10.141.1.125&quot;, 
                &quot;ansible_network_os&quot;: &quot;eos&quot; 
            },
            ...
            }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion:&lt;/h3&gt;

&lt;p&gt;That’s it! Now let’s use this new inventory plugin along with a playbook to tie it all together. The playbook:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
#playbook.yaml

- name: DISPLAY THE INVENTORY VARS
  hosts: nxos, core # These are dynamically generated groups from the plugin
  gather_facts: no
  tasks:
    - name: DISPLAY THE HOST VARS
      debug:
        msg: &quot;The mgmt IP is {{ ansible_host }} and platorm is {{ ansible_network_os }}&quot;
      

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the playbook as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;(ansible) ~/P/m/inventory_plugin » ansible-playbook -i csv_inventory.y
aml playbook.yaml                                                                     
                                                                      
PLAY [DISPLAY THE INVENTORY VARS] ************************************
**********************************************************************
**                                                                    
                                                                      
TASK [DISPLAY THE HOST VARS] *****************************************
**********************************************************************
**                                                                    
ok: [ORDagg01] =&amp;gt; {                                                   
    &quot;msg&quot;: &quot;The mgmt IP is 10.122.1.118 and platorm is nxos&quot;          
}                                                                     
ok: [ORDagg04] =&amp;gt; {                                                   
    &quot;msg&quot;: &quot;The mgmt IP is 10.122.1.121 and platorm is nxos&quot;          
}                                                                     
ok: [ORDagg02] =&amp;gt; {                                                   
    &quot;msg&quot;: &quot;The mgmt IP is 10.122.1.119 and platorm is nxos&quot;          
}
.
.
.
ok: [ORDcore02] =&amp;gt; {
    &quot;msg&quot;: &quot;The mgmt IP is 10.122.1.115 and platorm is ios&quot;
}                 
ok: [MCOcore02] =&amp;gt; {
    &quot;msg&quot;: &quot;The mgmt IP is 10.141.1.115 and platorm is junos&quot;
}                 
ok: [MCOcore01] =&amp;gt; {
    &quot;msg&quot;: &quot;The mgmt IP is 10.141.1.114 and platorm is junos&quot;
} 
...&amp;lt;output ommited for brevity&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hope this helped with your understanding of how to write a custom inventory plugin for Ansible. If you follow a different workflow or have constructive improvements, I’d love to learn from you.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Custom credentials in Ansible Tower to store Github private keys</title>
   <link href="http://localhost:4000/2019/06/08/observations/"/>
   <updated>2019-06-08T00:00:00-04:00</updated>
   <id>http://localhost:4000/2019/06/08/observations</id>
   <content type="html">&lt;p&gt;This post shows you how to add a custom credential in Ansible Tower, that stores SSH private keys. I won’t dive into what custom credentials are and how to get started with them because it is brilliantly covered in this “Inside Playbook” https://www.ansible.com/blog/ansible-Tower-feature-spotlight-custom-credentials by &lt;a href=&quot;https://twitter.com/bill_nottingham&quot;&gt;@bill_nottingham&lt;/a&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;h3 id=&quot;my-use-case&quot;&gt;My use case&lt;/h3&gt;

&lt;p&gt;One of the roles in my playbook involves cloning a private git repo. For this, I use the Ansible &lt;a href=&quot;https://docs.ansible.com/ansible/latest/modules/git_module.html&quot;&gt;git &lt;/a&gt; module. Since this is a private repo, I cannot use the &lt;strong&gt;https&lt;/strong&gt; URL, since doing so, my playbook will always require human input. Running the following playbook:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
- name: DEMO AN INTERACTIVE PRIVATE KEY
  hosts: localhost
  gather_facts: no
  tasks:

    - name: CLONE THE GIT REPO
      git:
        repo: https://github.com/termlen0/test_repo.git
        dest: /tmp/my_test_repo

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…will result in the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;[ec2-user@ip-10-0-0-194 tmp]$ ansible-playbook demo_interactive_private_key.yml 
 [WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not
match 'all'


PLAY [DEMO AN INTERACTIVE PRIVATE KEY] *****************************************************************************

TASK [CLONE THE GIT REPO] ******************************************************************************************
Username for 'https://github.com': 



&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;…where the playbook is waiting on my interactive response&lt;/p&gt;

&lt;h3 id=&quot;solving-using-a-ssh-key-pair&quot;&gt;Solving using a SSH key pair&lt;/h3&gt;

&lt;p&gt;This situation is easily remedied by switching from the &lt;strong&gt;https&lt;/strong&gt; to a &lt;strong&gt;ssh&lt;/strong&gt; url and then using the SSH key pair registered with github.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
- name: DEMO AN INTERACTIVE PRIVATE KEY
  hosts: localhost
  gather_facts: no
  tasks:

    - name: CLONE THE GIT REPO
      git:
        repo: git@github.com:termlen0/test_repo.git
        dest: /tmp/my_test_repo
        key_file: ./my_private_key

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;moving-this-solution-to-ansible-tower&quot;&gt;Moving this solution to Ansible Tower&lt;/h3&gt;

&lt;p&gt;To move this playbook to my central Tower server, I need to take a different approach because I don’t want my private key to be on the Tower file system. 
One option is to define a custom credential and supply my private key through this credential. Custom credentials come in handy when you want to inject sensitive data as extra vars or environment variables into your playbook (exhaustive details &lt;a href=&quot;https://docs.ansible.com/ansible-Tower/latest/html/userguide/credential_types.html&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Let’s dive right into it. The work flow I use is as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. First we create a new credential type

2. Then, add new credential(s) using this custom credential 

3. Invoke the credential from the job template
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;1-create-a-new-credential-type&quot;&gt;1. Create a new credential type&lt;/h4&gt;

&lt;p&gt;As a Tower admin, you can create a custom credential by clicking on &lt;em&gt;ADMINISTRATION&amp;gt; Credential Types&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/custom_cred1.png&quot;&gt;&lt;img src=&quot;/assets/custom_cred1.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, I’ve created a new credential type and I’ve named it &lt;strong&gt;PRIVATE KEY CRED&lt;/strong&gt;. Custom credentials are defined using 2 components :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. Input Configuration

2. Injector Configuration
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simply put, the input configuration is where you will define the characteristics/attributes of the custom credential you are defining. In my case:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;fields:
  - id: my_private_key
    type: string
    label: private_key
    secret: true
    multiline: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;secret: true&lt;/code&gt; will make sure that the data stored in this credential will be encrypted at rest and &lt;code&gt;multiline: true&lt;/code&gt; will accommodate for private keys, which typically contain multiple lines.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Injector Configuration&lt;/em&gt; section, is how the data contained in the custom credential will be &lt;strong&gt;injected&lt;/strong&gt; into our playbook. Let’s break this down for my example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;file:
  template.my_key: &quot;{{ my_private_key  }}&quot;
extra_vars:
  secret_key: &quot;{{ tower.filename.my_key  }}&quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;file&lt;/code&gt; parameter tells us that the string data of the &lt;code&gt;my_private_key&lt;/code&gt; custom credential id will be stored as a temporary file. The &lt;code&gt;template.my_key&lt;/code&gt; is how Tower will reference this file, using the identifier &lt;code&gt;my_key&lt;/code&gt;. So now, at this point the data collected from the input field is going to be stored as a temporary file that Tower can reference using &lt;code&gt;my_key&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The next part is &lt;code&gt;extra_vars&lt;/code&gt;. Here, I am configuring the injector to pass the data into the playbook as an extra var. The extra var name is  &lt;code&gt;secret_key&lt;/code&gt; and the value of this variable will be the temporary file referenced by Tower as &lt;code&gt;my_key&lt;/code&gt;. This will be clear further down when we debug this variable within our playbook.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In other words &lt;em&gt;tower.filename&lt;/em&gt; is not user defined, whereas &lt;em&gt;my_key&lt;/em&gt; is.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok, now onto using this brand new custom credential that we just created!&lt;/p&gt;

&lt;h4 id=&quot;2-add-new-credentials&quot;&gt;2. Add new credentials&lt;/h4&gt;

&lt;p&gt;This step should look familiar to Tower/AWX users. Create a new credential by choosing the &lt;em&gt;RESOURCES &amp;gt; Credentials&lt;/em&gt; option from the sidebar:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/custom_cred2.png&quot;&gt;&lt;img src=&quot;/assets/custom_cred2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;After saving the private key is encrypted and stored securely on Tower.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Repeat this step for as many users as needed that will be using the github repo.&lt;/p&gt;

&lt;h4 id=&quot;3-invoke-the-custom-credential-from-the-job-template&quot;&gt;3. Invoke the custom credential from the job template&lt;/h4&gt;

&lt;p&gt;This step is where it all comes together. So first, let’s update our playbook so that we can take advantage of the custom credential that’s being injected as an &lt;em&gt;extra var&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
- name: DEMO AN INTERACTIVE PRIVATE KEY
  hosts: localhost
  gather_facts: no
  tasks:

    - name: DISPLAY THE INJECTED EXTRA VAR
      debug:
        var: secret_key

    - name: CLONE THE GIT REPO
      git:
        repo: git@github.com:termlen0/test_repo.git
        dest: /tmp/my_test_repo
        key_file: &quot;{{ secret_key  }}&quot;
      delegate_to: localhost

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Recall that in step 1, we are injecting the private key as a variable named &lt;em&gt;secret_key&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Great, now let’s add a job template that ties this playbook and our custom credential together:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/custom_cred3.png&quot;&gt;&lt;img src=&quot;/assets/custom_cred3.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note how I have the credential to be &lt;strong&gt;PROMPT ON LAUNCH&lt;/strong&gt;? For my use case, I’d like others in my org to be able to interact with this private github repo. Selecting the &lt;strong&gt;PROMPT ON LAUNCH&lt;/strong&gt; enables each individual to use their own private ssh key through the custom credentials we discussed above.&lt;/p&gt;

&lt;p&gt;When I launch the template, I am prompted to choose a credential type. I choose the custom credential we created &lt;strong&gt;PRIVATE KEY CRED&lt;/strong&gt;. Which then lists the available private keys of this type.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/custom_cred4.png&quot;&gt;&lt;img src=&quot;/assets/custom_cred4.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Use the powerful Tower RBAC to restrict who can use which credentials.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, launching the template results in the repo being cloned as expected:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/custom_cred5.png&quot;&gt;&lt;img src=&quot;/assets/custom_cred5.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note the contents of the &lt;strong&gt;secret_key&lt;/strong&gt; variable in the play output. It references the temporary file that the custom credential creates (and deletes after the play execution), containing my private key details.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Hopefully this post helps folks who are trying to figure out how to deal with SSH keys and Github connectivity. Please let me know if you have questions through the comments/social media.&lt;/p&gt;

&lt;p&gt;If you have solved this in Tower using a different method, I’d love to hear how you did it as well.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Using Ansible network-engine to simplify network automation tasks</title>
   <link href="http://localhost:4000/2018/07/30/observations/"/>
   <updated>2018-07-30T00:00:00-04:00</updated>
   <id>http://localhost:4000/2018/07/30/observations</id>
   <content type="html">&lt;p&gt;Last week at Networking field day (&lt;a href=&quot;http://techfieldday.com/event/nfd18/&quot;&gt;NFD18&lt;/a&gt;), Peter Sprygada (&lt;a href=&quot;https://twitter.com/privateip&quot;&gt;@privateip&lt;/a&gt;) gave a fantastic presentation about the problems in network automation and new initiatives from Ansible to help network and automation engineers.&lt;/p&gt;

&lt;p&gt;In short - network automation teams are recreating similar Ansible playbooks since most of us have similar problems to solve. For instance, adding an application to the datacenter will require creation of VLANS, extending them over port channels, creating STP priorities etc. The Ansible network-engine strives to provide pre-canned, opinionated (meaning best-practices) roles that will make automation easier to kick start and reuse across most teams.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/9tP75pfiZV0?t=14m55s&quot;&gt;In this section of the video&lt;/a&gt;, Peter dives into the layout of the network-engine role and how it allows the creation of “network functions” ( &lt;em&gt;BTW, I highly recommend watching the entire video&lt;/em&gt; ).&lt;/p&gt;

&lt;p&gt;In this blog post, I am hoping to illustrate the idea of network functions through an example. The NFD18 presentation also seemed to raise questions/concerns about Ansible’s approach, potentially causing it to move away from being a simple automation tool, to becoming a complex one - like a programming language. This was interesting feedback to me. I hope to illustrate that, in contrast, the approach actually makes writing playbooks extremely easy for network engineers through this post. As always, I welcome your feedback/disagreements.&lt;/p&gt;

&lt;h3 id=&quot;an-illustrative-use-case&quot;&gt;An illustrative use case&lt;/h3&gt;

&lt;p&gt;As network engineers how many times have we dealt with a ticket/request that reads: &lt;strong&gt;“My super important application needs to talk to the database on port 5555. Make this happen!”&lt;/strong&gt;. Well, maybe it is worded a lot more politely…..maybe. This might require of us to crawl through hundreds of devices to validate existing ACLs, to ensure whether that the traffic is already being allowed.&lt;/p&gt;

&lt;p&gt;What if we had a “network function” that did this for us? Given the source/destination tuple, this “function” would return all matched ACLs within the infrastructure.&lt;/p&gt;

&lt;h3 id=&quot;persona-based-automation-development&quot;&gt;Persona based automation development&lt;/h3&gt;

&lt;p&gt;In my opinion, one of the main reason for the popularity of Ansible for network automation, has been it’s simplicity and easy of use. A network engineer can write a playbook using a &lt;code&gt;YAML&lt;/code&gt; file that is very readable (and easily re-callable 6 months after writing it) to manage configuration or use operational state data.&lt;/p&gt;

&lt;p&gt;For our present use case, say something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
- name: CHECK FOR ACL THAT MATCHES RULE
  hosts: all
  connection: network_cli
  gather_facts: no

  tasks:

    - include_role:
        name: ios_check_acls
      vars:
        protocol: 'udp'
        action: 'permit'
        src_network: '10.100.100.2'
        src_mask: '255.255.255.255'
        dst_network: '3.0.0.128'
        dst_mask: '255.255.255.128'
        dst_port: '2222'

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a subject matter expert of the underlying network infrastructure, this playbook is easy to read and I should be able to run this against all my devices to get an output that looks like :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;TASK [ios_check_acls : DISPLAY MATCH] ***************************************************************************************************************************************
ok: [rtr1] =&amp;gt; {
    &quot;output.result&quot;: [
        {
            &quot;ace_action&quot;: &quot;permit&quot;,
            &quot;ace_name&quot;: &quot;PERMIT-ALL&quot;,
            &quot;ace_number&quot;: &quot;10&quot;,
            &quot;rule_match&quot;: &quot;any -&amp;gt; any:&quot;
        }
    ]
}
ok: [rtr2] =&amp;gt; {
    &quot;output.result&quot;: &quot;No match found&quot;
}
ok: [rtr3] =&amp;gt; {
    &quot;output.result&quot;: [
        {
            &quot;ace_action&quot;: &quot;permit&quot;,
            &quot;ace_name&quot;: &quot;TESTER&quot;,
            &quot;ace_number&quot;: &quot;10&quot;,
            &quot;rule_match&quot;: &quot;10.100.100.0 0.0.0.127 -&amp;gt; 3.0.0.0 0.255.255.255:&quot;
        }
    ]
}
ok: [rtr4] =&amp;gt; {
    &quot;output.result&quot;: &quot;No match found&quot;
}


&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note how there is no match found on routers &lt;strong&gt;rtr2&lt;/strong&gt; and &lt;strong&gt;rtr4&lt;/strong&gt;. Also note how more permissive ACLs are accounted for.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is precisely what the Ansible &lt;code&gt;network-engine&lt;/code&gt; role enables. Let’s break down this playbook to understand what is happening here - a ‘who does what’ visual:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/playbook_flow.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The playbook is simple and is written by the network SME. This playbook is uncomplicated, easy to read and revisit.&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;ios_check_acls&lt;/code&gt;  is a “network function” role and is written by advanced Ansible developers (possibly value added re-sellers, vendors, independent community developers etc).&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;ios_check_acls&lt;/code&gt; calls a “provider” role - &lt;code&gt;ios&lt;/code&gt;. This role is written by advanced Ansible developers and potentially functions as an abstraction layer for Cisco IOS device commands, like parsing command output, loading declarative configuration etc. This abstraction allows role developers to use core modules from within Ansible to build opinionated automation tasks&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;ios&lt;/code&gt; role calls the “network-engine” role which provides core functionality like command parsing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;a-deeper-dive-into-the-roles&quot;&gt;A deeper dive into the roles&lt;/h3&gt;

&lt;p&gt;The directory structure of the resulting playbook looks as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/dir_layout.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;check_access.yaml&lt;/code&gt; is the playbook written by the network SME.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Keep in mind that the network SME has simply downloaded the necessary role from &lt;a href=&quot;https://galaxy.ansible.com&quot;&gt;‘ansible-galaxy’&lt;/a&gt; into that &lt;code&gt;roles&lt;/code&gt; directory. The dependency definitions within the role will automatically install all the other roles needed, freeing the user from having to worry about installing them.&lt;/p&gt;

&lt;p&gt;What does this network function role look like?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/role_dir.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This should look familiar. The role has been implemented using custom modules, templates and a tasks. Herein lies the advantage of using this construct - module developers, vendors, value added re-sellers and other community contributors are now easily able to push opinionated roles into Ansible galaxy, building up on existing provider roles. This makes pushing out custom modules a lot faster as well.&lt;/p&gt;

&lt;p&gt;The full source code for this demo is available within the &lt;a href=&quot;https://github.com/termlen0/network-engine-roledemo&quot;&gt; network-engine-roledemo github repo&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;The introduction of the Ansible network-engine and the push towards creating “network function” roles makes the end user - the network SME’s life a lot easier. Installing tried and tested roles that address majority use cases will make writing network automation playbooks a breeze. This will enable the adoption of netDevOps like never before.&lt;/p&gt;

&lt;p&gt;While the roles themselves might be complex to write, keep the end user in mind. As a network engineer do I really care whether &lt;code&gt;YAML&lt;/code&gt; is or is not a programming language? Does it matter if logic and loops are implemented in the construction of roles? As an end-user if I can get  &lt;strong&gt;supported&lt;/strong&gt;, best-practices based roles that make my life easier and allows me to focus on higher value outcomes for my business, I’d rather leave the debate to the pedantic folks out there and get stuff done.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;BTW, you can install a working copy of the role in this example as follows:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ansible-galaxy install termlen0.ios_check_acls 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There really is no easy button but Ansible network-engine and network function roles make it one step easier for the folks in the trenches.&lt;/p&gt;

&lt;p&gt;As always, I’d love to hear your thoughts and opinions about this direction. What do you think?&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Part2 of a 2 part blog on using the Ansible network-engine's command parser</title>
   <link href="http://localhost:4000/2018/07/15/observations/"/>
   <updated>2018-07-15T00:00:00-04:00</updated>
   <id>http://localhost:4000/2018/07/15/observations</id>
   <content type="html">&lt;p&gt;In &lt;a href=&quot;https://termlen0.github.io/2018/06/26/observations/&quot;&gt;Part 1&lt;/a&gt; of this 2 part series, I illustrated how to invoke the &lt;code&gt;command_parser&lt;/code&gt; module using the &lt;code&gt;network-engine&lt;/code&gt; role from Ansible. I then used it to illustrate how to build a simple parser, leveraging regex to convert unstructured device command output to structured data.&lt;/p&gt;

&lt;p&gt;In this post, I’ll build on it, highlighting the command parser options that makes wrangling &lt;em&gt;any&lt;/em&gt; complex device output into structured output. In particular this post will deep-dive into the following directives:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;pattern_group&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;extend&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The playbook and complete parser is available in &lt;a href=&quot;https://github.com/termlen0/parser_demo&quot;&gt;this git repo.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;understanding-the-output-pattern&quot;&gt;Understanding the output pattern&lt;/h3&gt;

&lt;p&gt;We used &lt;code&gt;pattern_match&lt;/code&gt; in the last example to parse the output of the &lt;code&gt;show ip interface brief&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;- name: MATCH PATTERN
  pattern_match:
    regex: &quot;^(\\S+)\\s+(\\d+\\.\\d+\\.\\d+\\.\\d+).*(up|administratively down).*(up|down)&quot;
    match_all: yes
  register: section
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that we used the &lt;code&gt;match_all&lt;/code&gt; parameter to match each regex group. This worked well for matching against the following command output, because we were working with a single line at a time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;rtr1#sh ip int bri
Interface              IP-Address      OK? Method Status                Protocol
GigabitEthernet1       172.16.230.103  YES DHCP   up                    up      
Loopback0              192.168.1.101   YES manual up                    up      
rtr1#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What if we wanted to loop over entire sections in the output? Let’s illustrate using an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;rtr1#sh interfaces 
GigabitEthernet1 is up, line protocol is up 
  Hardware is CSR vNIC, address is 0e56.892c.0434 (bia 0e56.892c.0434)
  Internet address is 172.16.230.103/16
  MTU 1500 bytes, BW 1000000 Kbit/sec, DLY 10 usec, 
     reliability 255/255, txload 1/255, rxload 1/255
  Encapsulation ARPA, loopback not set
  Keepalive set (10 sec)
  Full Duplex, 1000Mbps, link type is auto, media type is Virtual
  output flow-control is unsupported, input flow-control is unsupported
  ARP type: ARPA, ARP Timeout 04:00:00
  Last input 00:00:00, output 00:00:00, output hang never
  Last clearing of &quot;show interface&quot; counters never
  Input queue: 0/375/0/0 (size/max/drops/flushes); Total output drops: 0
  Queueing strategy: fifo
  Output queue: 0/40 (size/max)
  5 minute input rate 0 bits/sec, 0 packets/sec
  5 minute output rate 1000 bits/sec, 1 packets/sec
     204069 packets input, 21320843 bytes, 0 no buffer
     Received 0 broadcasts (0 IP multicasts)
     0 runts, 0 giants, 0 throttles 
     0 input errors, 0 CRC, 0 frame, 0 overrun, 0 ignored
     0 watchdog, 0 multicast, 0 pause input
     205563 packets output, 26944541 bytes, 0 underruns
     0 output errors, 0 collisions, 1 interface resets
     0 unknown protocol drops
     0 babbles, 0 late collision, 0 deferred
     0 lost carrier, 0 no carrier, 0 pause output
     0 output buffer failures, 0 output buffers swapped out
Loopback0 is up, line protocol is up 
  Hardware is Loopback
  Internet address is 192.168.1.101/24
  MTU 1514 bytes, BW 8000000 Kbit/sec, DLY 5000 usec, 
     reliability 255/255, txload 1/255, rxload 1/255
  Encapsulation LOOPBACK, loopback not set
  Keepalive set (10 sec)
  Last input never, output never, output hang never
  Last clearing of &quot;show interface&quot; counters never
.
.
.
.
.
&amp;lt;output omitted for brevity&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;show interfaces&lt;/code&gt; command displays a wealth of information per interface. Let’s say we want to capture the following information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Interface name&lt;/li&gt;
  &lt;li&gt;MTU&lt;/li&gt;
  &lt;li&gt;txload&lt;/li&gt;
  &lt;li&gt;rxload&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;building-a-list&quot;&gt;Building a list&lt;/h3&gt;
&lt;p&gt;The first step is to build a list using &lt;code&gt;pattern_match&lt;/code&gt; where each element of the list corresponds to all the information about an interface.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
- name: parser meta data
  parser_metadata:
    version: 1.0
    command: show interface
    network_os: ios

- name: match sections
  pattern_match:
    regex: &quot;^(\\S+) is.*(?:up|down),&quot;
    match_all: yes
    match_greedy: yes
  register: section
  export: yes

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;The &lt;code&gt;match_greedy&lt;/code&gt; will match everything after the regex match. The &lt;code&gt;match_all&lt;/code&gt; will match each interface as a distinct match and add it to the list variable called section.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Debugging this output in the playbook reveals the contents of the &lt;code&gt;section&lt;/code&gt; variable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;
TASK [DISPLAY THE PARSED OUTPUT] **************************************************************************************************ok: [rtr1] =&amp;gt; {
    &quot;section&quot;: [
        &quot;GigabitEthernet1 is up, line protocol is up \n  Hardware is CSR vNIC, address is 0e56.892c.0434 (bia 0e56.892c.0434)\n  Internet address is 172.16.230.103/16\n  MTU 1500 bytes, BW 1000000 Kbit/sec, DLY 10 usec, \n     reliability 255/255, txload 1/255, rxload 1/255\n  Encapsulation ARPA, loopback not set\n  Keepalive set (10 sec)\n  Full Duplex, 1000Mbps, link type is auto, media type is Virtual\n  output flow-control is unsupported, input flow-control is unsupported\n  ARP type: ARPA, ARP Timeout 04:00:00\n  Last input 00:00:00, output 00:00:00, output hang never\n  Last clearing of \&quot;show interface\&quot; counters never\n  Input queue: 0/375/0/0 (size/max/drops/flushes); Total output drops: 0\n  Queueing strategy: fifo\n  Output queue: 0/40 (size/max)\n  5 minute input 
rate 1000 bits/sec, 2 packets/sec\n  5 minute output rate 1000 bits/sec, 2 packets/sec\n     206723 packets input, 21601205 bytes, 0 no buffer\n     Received 0 broadcasts (0 IP multicasts)\n     0 runts, 0 giants, 0 throttles \n     0 input errors, 0 CRC, 0 frame, 0 overrun, 0 ignored\n     0 watchdog, 0 multicast, 0 pause input\n     208526 packets output, 27353095 bytes, 0 underruns\n     0 output errors, 0 collisions, 1 interface resets\n     0 unknown protocol drops\n     0 babbles, 0 late collision, 0 deferred\n     0 lost carrier, 0 no carrier, 0 pause output\n     0 output buffer failures, 0 output buffers swapped out\n&quot;, 
        &quot;Loopback0 is up, line protocol is up \n  Hardware is Loopback\n  Internet address is 192.168.1.101/24\n  MTU 1514 bytes, BW 8000000 Kbit/sec, DLY 5000 usec, \n     reliability 255/255, txload 1/255, rxload 1/255\n  Encapsulation LOOPBACK, loopback not set\n  Keepalive set (10 sec)\n  Last input never, output never, output hang never\n  Last clearing of \&quot;show interface\&quot; counters never\n  Input queue: 0/75/0/0 (size/max/drops/flushes); Total output drops: 0\n  Que
.
.
.
.
.
&amp;lt;output omitted for brevity&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that all info about Gig1 is the first element of this list. Loopback0 is the second element and so on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;building-a-pattern-group&quot;&gt;Building a pattern group&lt;/h3&gt;

&lt;p&gt;Now that we have list, we can use the same design patterns we are familiar with in Ansible, using loops. Using the &lt;code&gt;pattern_group&lt;/code&gt; directive we can now build a new nested variable that uses the &lt;code&gt;pattern_match&lt;/code&gt; directive.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;- name: match interface values
  pattern_group:
    - name: match name
      pattern_match:
        regex: &quot;^(\\S+)&quot;
        content: &quot;{{ item }}&quot;
      register: name

    - name: match mtu
      pattern_match:
        regex: &quot;MTU (\\d+)&quot;
        content: &quot;{{ item }}&quot;
      register: mtu

    - name: match txload
      pattern_match:
        regex: &quot;reliability.*txload\\s(\\S+),.*&quot;
        content: &quot;{{ item }}&quot;
      register: txload

    - name: match rxload
      pattern_match:
        regex: &quot;reliability.*rxload\\s(\\S+)&quot;
        content: &quot;{{ item }}&quot;
      register: rxload
  loop: &quot;{{ section }}&quot;
  register: interfaces
  export: yes

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Effectively, we are looping through the data of each interface and creating a pattern group (registering it as a variable called &lt;code&gt;interfaces&lt;/code&gt;). Note the similarity of pattern using the &lt;code&gt;item&lt;/code&gt; variable while working with loops in Ansible. Each of the &lt;code&gt;pattern_match&lt;/code&gt; directives nested within the &lt;code&gt;pattern_group&lt;/code&gt; is using a regex to match the data we wanted at the start.&lt;/p&gt;

&lt;p&gt;On re-running the playbook with the updated parser, our debug output looks as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;TASK [DISPLAY THE PARSED OUTPUT] **************************************************************************************************
ok: [rtr1] =&amp;gt; {
    &quot;interfaces&quot;: [
        {
            &quot;mtu&quot;: {
                &quot;matches&quot;: [
                    &quot;1500&quot;
                ]
            }, 
            &quot;name&quot;: {
                &quot;matches&quot;: [
                    &quot;GigabitEthernet1&quot;
                ]
            }, 
            &quot;rxload&quot;: {
                &quot;matches&quot;: [
                    &quot;1/255&quot;
                ]
            }, 
            &quot;txload&quot;: {
                &quot;matches&quot;: [
                    &quot;1/255&quot;
                ]
            }
        }, 
        {
            &quot;mtu&quot;: {
                &quot;matches&quot;: [
                    &quot;1514&quot;
                ]
            }, 
            &quot;name&quot;: {
                &quot;matches&quot;: [
                    &quot;Loopback0&quot;
                ]
            }, 
            &quot;rxload&quot;: {
                &quot;matches&quot;: [
                    &quot;1/255&quot;
                ]
            }, 
            &quot;txload&quot;: {
                &quot;matches&quot;: [
                    &quot;1/255&quot;
                ]
            }
        }, 
.
.
.
.
.
&amp;lt;output omitted for brevity&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;creating-a-json-output&quot;&gt;Creating a JSON output&lt;/h3&gt;

&lt;p&gt;Now that we have our regular expressions sorted out and we can see that the data we are interested in is being returned as a structured object, all that remains is to build a JSON object similar to how we did it in &lt;a href=&quot;https://termlen0.github.io/2018/06/26/observations/&quot;&gt;Part1&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;- name: generate json data structure
  json_template:
    template:
      - key: &quot;{{ item.name.matches.0 }}&quot;
        object:
        - key: config
          object:
            - key: name
              value: &quot;{{ item.name.matches.0 }}&quot;
            - key: mtu
              value: &quot;{{ item.mtu.matches.0 }}&quot;
            - key: rxload
              value: &quot;{{ item.rxload.matches.0 }}&quot;
            - key: txload
              value: &quot;{{ item.txload.matches.0 }}&quot;
  loop: &quot;{{ interfaces }}&quot;
  export: yes
  register: interface_facts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Re-running the playbook and debugging &lt;code&gt;interface_facts&lt;/code&gt; shows us the final, desired output.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;TASK [DISPLAY THE PARSED OUTPUT] **************************************************************************************************
ok: [rtr1] =&amp;gt; {
    &quot;interface_facts&quot;: [
        {
            &quot;GigabitEthernet1&quot;: {
                &quot;config&quot;: {
                    &quot;mtu&quot;: 1500, 
                    &quot;name&quot;: &quot;GigabitEthernet1&quot;, 
                    &quot;rxload&quot;: &quot;1/255&quot;, 
                    &quot;txload&quot;: &quot;1/255&quot;
                }
            }
        }, 
        {
            &quot;Loopback0&quot;: {
                &quot;config&quot;: {
                    &quot;mtu&quot;: 1514, 
                    &quot;name&quot;: &quot;Loopback0&quot;, 
                    &quot;rxload&quot;: &quot;1/255&quot;, 
                    &quot;txload&quot;: &quot;1/255&quot;
                }
            }
        }, 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is why I think &lt;code&gt;command_parser&lt;/code&gt; is such a powerful tool to parse complex show command output, using the same Ansible design patterns we are familiar with, without needing to learn yet another domain specific syntax or language. As network engineers we now have a tool that abstracts away the underlying complexity of programming.&lt;/p&gt;

&lt;p&gt;Alright now on to some more &lt;code&gt;command_parser&lt;/code&gt; goodness!…..&lt;/p&gt;

&lt;h3 id=&quot;building-customized-facts-without-needing-to-write-a-module&quot;&gt;Building customized “facts” without needing to write a module!&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;NOTE: THE FOLLOWING WORKS &lt;em&gt;ONLY&lt;/em&gt; WITH THE DEVEL BRANCH OF THE NETWORK-ENGINE ROLE AT THE TIME OF THIS POST&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have used the network modules in Ansible you are probably familiar with the &lt;code&gt;*_facts&lt;/code&gt; modules. Modules like &lt;code&gt;ios_facts&lt;/code&gt;, &lt;code&gt;eos_facts&lt;/code&gt;, &lt;code&gt;junos_facts&lt;/code&gt; etc. While you can have limited control over the output from these modules (by using the &lt;code&gt;gather_subset&lt;/code&gt; directive), you are by and large restricted to what the module creators consider &lt;strong&gt;“facts”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the following section, let’s look at a powerful directive from the &lt;code&gt;command_parser&lt;/code&gt; module called &lt;code&gt;extend&lt;/code&gt; to learn how we can build our own customized facts parser - without needing to write a single line of code!!&lt;/p&gt;

&lt;p&gt;We’ll use the parsers we created in Part1 and the above one to create a single variable called &lt;code&gt;ios_interface_facts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The basic changes needed to the parsers are as follows:&lt;/p&gt;

&lt;h6 id=&quot;show_ip_interfacesyaml&quot;&gt;show_ip_interfaces.yaml&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;  extend: ios_interface_facts

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;h6 id=&quot;show_interfacesyaml&quot;&gt;show_interfaces.yaml&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;  export_as: dict
  extend: ios_interface_facts

&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;These directives are added to the &lt;code&gt;json_template&lt;/code&gt; section of the parser. Please see the github  &lt;a href=&quot;https://github.com/termlen0/parser_demo&quot;&gt;repo&lt;/a&gt; for details. You will need to uncomment them to test.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With this in place, re-running the playbook and debugging the &lt;code&gt;ios_interfaces_facts&lt;/code&gt; variable shows how the output of both the above parsers are made available in a single variable.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: Run the playbook invoking the &lt;strong&gt;demo_extend&lt;/strong&gt; tag if you are testing with the sample &lt;a href=&quot;https://github.com/termlen0/parser_demo&quot;&gt;repo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;TASK [DISPLAY THE GENERATED FACT] ****************************************************************************************************************
ok: [rtr1] =&amp;gt; {
    &quot;ios_interface_facts&quot;: {
        &quot;interface_facts&quot;: {
            &quot;GigabitEthernet1&quot;: {
                &quot;config&quot;: {
                    &quot;mtu&quot;: 1500, 
                    &quot;name&quot;: &quot;GigabitEthernet1&quot;, 
                    &quot;rxload&quot;: &quot;1/255&quot;, 
                    &quot;txload&quot;: &quot;1/255&quot;
                }
            }, 
            &quot;Loopback0&quot;: {
                &quot;config&quot;: {
                    &quot;mtu&quot;: 1514, 
                    &quot;name&quot;: &quot;Loopback0&quot;, 
                    &quot;rxload&quot;: &quot;1/255&quot;, 
                    &quot;txload&quot;: &quot;1/255&quot;
                }
            }, 
            &quot;Loopback1&quot;: {
.
.
.
.
.
&amp;lt;output omitted for brevity&amp;gt;
        &quot;ip_interface_facts&quot;: [
            {
                &quot;GigabitEthernet1&quot;: {
                    &quot;data&quot;: {
                        &quot;admin_state&quot;: &quot;up&quot;, 
                        &quot;ip&quot;: &quot;172.16.230.103&quot;, 
                        &quot;name&quot;: &quot;GigabitEthernet1&quot;, 
                        &quot;protocol_state&quot;: &quot;up&quot;
                    }
                }
            }, 
            {
                &quot;Loopback0&quot;: {
                    &quot;data&quot;: {
                        &quot;admin_state&quot;: &quot;up&quot;, 
                        &quot;ip&quot;: &quot;192.168.1.101&quot;, 
                        &quot;name&quot;: &quot;Loopback0&quot;, 
                        &quot;protocol_state&quot;: &quot;up&quot;
                    }
                }
            }, 
            {
                &quot;Loopback1&quot;: {
                    &quot;data&quot;: {
                        &quot;admin_state&quot;: &quot;up&quot;, 
                        &quot;ip&quot;: &quot;10.1.1.101&quot;, 
.
.
.
.
.
&amp;lt;output omitted for brevity&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see the &lt;code&gt;ios_interfaces_facts&lt;/code&gt; is a nested object that contains 2 keys &lt;code&gt;interface_facts&lt;/code&gt; - the parsed output of the &lt;em&gt;show interfaces&lt;/em&gt; command - and the &lt;code&gt;ip_interface_facts&lt;/code&gt; - the parsed output of the &lt;em&gt;show ip interface brief&lt;/em&gt; command.&lt;/p&gt;

&lt;p&gt;Hopefully this quick illustration of some of the powerful directives within command parser are helpful to you. I’d love to hear what your thoughts are on this approach and perceived ease/difficulty with this method of parsing device command output.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Part1 of a 2 part blog on using the Ansible network-engine's command parser</title>
   <link href="http://localhost:4000/2018/06/26/observations/"/>
   <updated>2018-06-26T00:00:00-04:00</updated>
   <id>http://localhost:4000/2018/06/26/observations</id>
   <content type="html">&lt;h3 id=&quot;a-very-brief-introduction&quot;&gt;A very brief introduction&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ansible-network/network-engine/blob/devel/docs/user_guide/README.md&quot;&gt;network-engine&lt;/a&gt; role was made available through Ansible galaxy recently. One of the modules this role makes available for network engineers, is the &lt;a href=&quot;https://github.com/ansible-network/network-engine/blob/devel/docs/user_guide/command_parser.md&quot;&gt;command parser&lt;/a&gt;. As the name implies, command parser enables the user to parse the output of &lt;em&gt;show&lt;/em&gt; commands - commands that network engineers know and love, that are “pretty” formatted but not structured.&lt;/p&gt;

&lt;p&gt;Until recently, I had only used &lt;a href=&quot;https://github.com/google/textfsm&quot;&gt;TextFSM&lt;/a&gt; to do this. While TextFSM works, it has a significant learning curve, IMO. Last week I decided to give the &lt;code&gt;command_parser&lt;/code&gt; module a spin and right off the bat my impressions were:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;If you are already comfortable using Ansible, you will feel at home working with the command parser&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The learning curve is much shorter without needing to worry about learning another domain specific language&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: This is in no way pitting one against the other. &lt;strong&gt;network-engine&lt;/strong&gt; provides a &lt;strong&gt;textfsm_parser&lt;/strong&gt; as well as the &lt;strong&gt;command_parser&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;p&gt;My intention through the 2 part blog, is to write about how to build command parser templates using 2 examples. I hope it will help others and will serve as a reference when I need it later.&lt;/p&gt;

&lt;p&gt;However, first thing first - The official documentation is available here: &lt;a href=&quot;https://github.com/ansible-network/network-engine/blob/devel/docs/directives/parser_directives.md&quot;&gt;command parser directives&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;diving-in-parsing-the-output-of-show-ip-interfaces-brief-on-a-cisco-ios-device&quot;&gt;Diving in: parsing the output of &lt;code&gt;show ip interfaces brief&lt;/code&gt; on a Cisco IOS device&lt;/h3&gt;

&lt;p&gt;Rather than reiterate what is in the documentation, lets dive in with an example. We’ll start off with the playbook that captures the output of the &lt;code&gt;show ip interfaces brief&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
- name: GENERATE A REPORT
  hosts: cisco
  gather_facts: no
  connection: network_cli

  roles:
    - ansible-network.network-engine

  tasks:
  - name: CAPTURE SHOW IP INTERFACE
    ios_command:
      commands:
        - show ip interface brief
    register: output
    
  - name: DISPLAY THE OUTPUT
    debug: var=output.stdout

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should hopefully look familiar to folks who are used to using Ansible for working with network devices. Pay attention to the&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;  roles:
    - ansible-network.network-engine

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the role that provides the &lt;code&gt;command_parser&lt;/code&gt; library that we will be working with. This role can be downloaded and installed as per instructions in the links above.&lt;/p&gt;

&lt;p&gt;On running the playbook (and limiting it to a single device):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;PLAY [GENERATE A REPORT ] ***************************************************************************

TASK [CAPTURE SHOW IP INTERFACE] ****************************************************************************
ok: [rtr1]

TASK [DISPLAY THE OUTPUT] *****************************************************************************************************************************************************************************************
ok: [rtr1] =&amp;gt; {
    &quot;output.stdout&quot;: [
        &quot;Interface              IP-Address      OK? Method Status                Protocol\nGigabitEthernet1       172.16.244.50   YES DHCP   up                    up      \nLoopback0              192.168.1.101   YES manual up                    up      \nLoopback1              10.1.1.101      YES manual administratively down down    \nTunnel0                10.100.100.1    YES manual up                    up      \nTunnel1                10.200.200.1    YES manual up                    up      \nVirtualPortGroup0      192.168.35.101  YES TFTP   up                    up&quot;
    ]
}

PLAY RECAP ********************************************************************************************************************************************************************************************************
rtr1                       : ok=2    changed=0    unreachable=0    failed=0  


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far so good. We got the output of the show command. Now we can send this “blob” of text to a command parser that can create structured data from it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;
---
- name: DYNAMIC REPORTING PART
  hosts: cisco
  gather_facts: no
  connection: network_cli

  roles:
    - ansible-network.network-engine

  tasks:
  - name: CAPTURE SHOW IP INTERFACE
    ios_command:
      commands:
        - show ip interface brief
    register: output

  - name: DISPLAY THE OUTPUT
    debug: var=output.stdout

  - name: PARSE THE RAW OUTPUT
    command_parser:
      file: &quot;parsers/ios/show_ip_interface_brief.yaml&quot;
      content: &quot;{{ output.stdout[0] }}&quot;




&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we get into the meat of this blog. Using the &lt;code&gt;command_parser&lt;/code&gt; module.&lt;/p&gt;

&lt;h3 id=&quot;writing-our-first-parser&quot;&gt;Writing our first parser&lt;/h3&gt;

&lt;p&gt;This is my workflow for creating a new parser:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Identify the regular expression/expressions needed to collect the data using regex101.com&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use the &lt;a href=&quot;https://github.com/ansible-network/network-engine/blob/devel/docs/directives/parser_directives.md&quot;&gt;parser directives&lt;/a&gt; to test out the regular expression&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Iterate and refine&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So let’s begin with creating the regular expression. Let’s say we want to capture the &lt;em&gt;Interface name, IP address, Admin state and Protocol State&lt;/em&gt; . The following regular expression is what I came up with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;^(\\S+)\\s+(\\d+\\.\\d+\\.\\d+\\.\\d+).*(up|administratively down).*(up|down)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On to step 2 testing this. The parser file defined by&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;      file: &quot;parsers/ios/show_ip_interface_brief.yaml&quot;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is a YAML file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;---
- name: PARSER META DATA
  parser_metadata:
    version: 1.0
    command: show ip interface brief
    network_os: ios

- name: MATCH PATTERN
  pattern_match:
    regex: &quot;^(\\S+)\\s+(\\d+\\.\\d+\\.\\d+\\.\\d+).*(up|administratively down).*(up|down)&quot;
    match_all: yes
  register: section
  export: yes

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we are using the &lt;code&gt;pattern_match&lt;/code&gt; directive. The regex is now applied to the blob of input passed in from the playbook task. The match groups are collected and stored into the variable called &lt;code&gt;section&lt;/code&gt;. We use the &lt;code&gt;match_all&lt;/code&gt; option in order to match all the capture groups.&lt;/p&gt;

&lt;p&gt;Note the use of the &lt;code&gt;export: yes&lt;/code&gt;. Without this directive the variable and value contained will not be sent back to the playbook for further processing.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As part of our development of the parser we might have to use the &lt;code&gt;export: yes&lt;/code&gt; at multiple stages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In order to test this, re-run the playbook but in &lt;code&gt;verbose&lt;/code&gt; mode:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;
TASK [PARSE THE RAW OUTPUT] ***************************************************************************************************************************************************************************************
ok: [rtr1] =&amp;gt; {&quot;ansible_facts&quot;: {&quot;section&quot;: [{&quot;matches&quot;: [&quot;GigabitEthernet1&quot;, &quot;172.16.244.50&quot;, &quot;up&quot;, &quot;up&quot;]}, {&quot;matches&quot;: [&quot;Loopback0&quot;, &quot;192.168.1.101&quot;, &quot;up&quot;, &quot;up&quot;]}, {&quot;matches&quot;: [&quot;Loopback1&quot;, &quot;10.1.1.101&quot;, &quot;administratively down&quot;, &quot;down&quot;]}, {&quot;matches&quot;: [&quot;Tunnel0&quot;, &quot;10.100.100.1&quot;, &quot;up&quot;, &quot;up&quot;]}, {&quot;matches&quot;: [&quot;Tunnel1&quot;, &quot;10.200.200.1&quot;, &quot;up&quot;, &quot;up&quot;]}, {&quot;matches&quot;: [&quot;VirtualPortGroup0&quot;, &quot;192.168.35.101&quot;, &quot;up&quot;, &quot;up&quot;]}]}, &quot;changed&quot;: false, &quot;included&quot;: [&quot;parsers/ios/show_ip_interface_brief.yaml&quot;]}

PLAY RECAP ********************************************************************************************************************************************************************************************************
rtr1                       : ok=2    changed=0    unreachable=0    failed=0   

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Great! We can already see the data being returned as list of dictionaries. Now within the command parser you have the option of cleaning up and presenting this data as a structured &lt;code&gt;json&lt;/code&gt; object. Let’s do that as the next step using the &lt;code&gt;json_template&lt;/code&gt; directive:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;
---
- name: PARSER META DATA
  parser_metadata:
    version: 1.0
    command: show ip interface brief
    network_os: ios

- name: MATCH PATTERN
  pattern_match:
    regex: &quot;^(\\S+)\\s+(\\d+\\.\\d+\\.\\d+\\.\\d+).*(up|administratively down).*(up|down)&quot;
    match_all: yes
  register: section

- name: GENERATE JSON DATA STRUCTURE
  json_template:
    template:
      - key: &quot;{{ item.matches.0 }}&quot;
        object:
        - key: data
          object:
            - key: name
              value: &quot;{{ item.matches.0 }}&quot;
            - key: ip
              value: &quot;{{ item.matches.1 }}&quot;
            - key: admin_state
              value: &quot;{{ item.matches.2 }}&quot;
            - key: protocol_state
              value: &quot;{{ item.matches.3 }}&quot;
  loop: &quot;{{ section }}&quot;
  export: yes
  register: ip_interface_facts


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The previous match was registered into a variable called &lt;code&gt;section&lt;/code&gt;. This is a list as seen from the verbose output above. This list can be looped over to work on individual elements using the &lt;code&gt;loop&lt;/code&gt; directive. The &lt;code&gt;json_template&lt;/code&gt; directive is used to define a nested dictionary with the key of each element being the name of the interface in this example.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: The &lt;strong&gt;export: yes&lt;/strong&gt; has been moved from the &lt;strong&gt;section&lt;/strong&gt; variable to the &lt;strong&gt;ip_interface_facts&lt;/strong&gt; variable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once exported the variable becomes available within the playbook and can be used just like any other variable in Ansible. Let’s go ahead and display this using &lt;code&gt;debug&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;
---
- name: DYNAMIC REPORTING PART
  hosts: cisco
  gather_facts: no
  connection: network_cli

  roles:
    - ansible-network.network-engine

  tasks:
  - name: CAPTURE SHOW IP ROUTE
    ios_command:
      commands:
        - show ip interface brief
    register: output

  - name: PARSE THE RAW OUTPUT
    command_parser:
      file: &quot;parsers/ios/show_ip_interface_brief.yaml&quot;
      content: &quot;{{ output.stdout[0] }}&quot;

  - name: DISPLAY THE DATA
    debug: var=ip_interface_facts
    


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we run the playbook:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;TASK [DISPLAY THE DATA] *******************************************************************************************************************************************************************************************
ok: [rtr1] =&amp;gt; {
    &quot;ip_interface_facts&quot;: [
        {
            &quot;GigabitEthernet1&quot;: {
                &quot;data&quot;: {
                    &quot;admin_state&quot;: &quot;up&quot;, 
                    &quot;ip&quot;: &quot;172.16.244.50&quot;, 
                    &quot;name&quot;: &quot;GigabitEthernet1&quot;, 
                    &quot;protocol_state&quot;: &quot;up&quot;
                }
            }
        }, 
        {
            &quot;Loopback0&quot;: {
                &quot;data&quot;: {
                    &quot;admin_state&quot;: &quot;up&quot;, 
                    &quot;ip&quot;: &quot;192.168.1.101&quot;, 
                    &quot;name&quot;: &quot;Loopback0&quot;, 
                    &quot;protocol_state&quot;: &quot;up&quot;
                }
            }
        }, 
        {
            &quot;Loopback1&quot;: {
                &quot;data&quot;: {
                    &quot;admin_state&quot;: &quot;administratively down&quot;, 
                    &quot;ip&quot;: &quot;10.1.1.101&quot;, 
                    &quot;name&quot;: &quot;Loopback1&quot;, 
                    &quot;protocol_state&quot;: &quot;down&quot;
                }
            }
        }, 
        {
            &quot;Tunnel0&quot;: {
                &quot;data&quot;: {
                    &quot;admin_state&quot;: &quot;up&quot;, 
                    &quot;ip&quot;: &quot;10.100.100.1&quot;, 
                    &quot;name&quot;: &quot;Tunnel0&quot;, 
.
.
.
.
.
&amp;lt;output omitted for brevity&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, wasn’t that easy!! At least I think it was a lot easier to work with personally than TextFSM.&lt;/p&gt;

&lt;p&gt;In part 2 of the blog series we will build a command parser for the &lt;code&gt;show interfaces&lt;/code&gt; command on IOS devices. This will be a little more complex than the example in part 1 and will hopefully help demonstrate how really powerful the &lt;code&gt;command_parser&lt;/code&gt; module is.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Twitter:&lt;/em&gt; &lt;a href=&quot;https://twitter.com/intent/tweet?url=http://localhost:4000/2018/06/26/observations/&amp;amp;text=Part1 of a 2 part blog on using the Ansible network-engine's command parser&amp;amp;via=termlen0&quot; target=&quot;_blank&quot;&gt; Share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/termlen0&quot;&gt;
  Follow me on Twitter&lt;/a&gt;!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Please reverse mentor your managers</title>
   <link href="http://localhost:4000/2018/03/19/observations/"/>
   <updated>2018-03-19T00:00:00-04:00</updated>
   <id>http://localhost:4000/2018/03/19/observations</id>
   <content type="html">&lt;p&gt;&lt;em&gt;“Everybody automate everything, now!”&lt;/em&gt; - Enterprise CTO (who just got back from a industry networking event)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“I wish my management would help bring in some of this cool network automation stuff I am learning from my peers online”&lt;/em&gt; - Network engineer&lt;/p&gt;

&lt;p&gt;I’ve heard these comments from numerous organizations; often from CTOs and engineers within the same organization. So if the topmost level of the management is laying down goals to automate “everything” and the engineers themselves are excited to make it happen, why is there a gap?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/middle_mgmt.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So are middle managers the problem? Across organizations, middle mangers could be senior network engineers who have advanced to a point where there is no technical growth path. They have become comfortable managing a team of network engineers and know how to hire network talent. The automation space is filled with technical jargon and buzzwords that are new (and therefore scary). Coming from a technical background fear of the unknown can be unnerving.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;From my experience, looking at this objectively, some ofthe common questions/pitfalls a network organization faces with respect to taking on automation are as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Aversion to risk&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Prioritizing automation&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Fear of ownership&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Uncharted hiring waters&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that I did not call out &lt;strong&gt;“Skill Gaps”&lt;/strong&gt;. In my opinion, the lack of automation tech-skills is the easiest risk that can be resolved. So much so that I refuse to even list it above.&lt;/p&gt;

&lt;h3 id=&quot;1-aversion-to-risk&quot;&gt;1. Aversion to risk&lt;/h3&gt;

&lt;p&gt;Network engineers have an OCD streak in them. It was a survival technique. No one wants to be troubleshooting production issues at 2 in the morning, so we are trained to obsessively check and double-check any changes to the network. In the past this has been a necessary trait. With the advancement in virtualization technologies, it is time for us to overcome this behavior. Easier said than done, but I want to lay out some practical steps for network engineers to get there:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If you are a major vendor shop (say Cisco/Juniper/Arista etc), use them. I always see the twitverse and other social media outlets with every vendor encouraging and trying to help engineers build automation skill sets. Use your SE as your partner to build PoCs and present them to your management. It is hard to fight data.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Recruit your manager. What is important to her this quarter or year? Take it on as an automation undertaking. If you are waiting for your manager to tell you to automate something, you are doing something wrong.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Recruit business stakeholders. Start small, educate using PoCs. Demonstrate due-diligence. In spite of all this, if something goes wrong, the organization will learn from the experience. By starting small, organizations will embrace failure.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-prioritizing&quot;&gt;2. Prioritizing&lt;/h3&gt;

&lt;p&gt;This is a top conversation item when I talk to engineers trying to bring in automation to their organization. &lt;em&gt;“My manager is fine with me picking up automation as long as I continue to execute my day job. Where do I find the time when my day is already loaded!”&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Have you tried talking to your manager about how spending 2 days to automate VLAN creation and deletion in your datacenter is going to free everyone’s time by 10%? The time gained can then be used to automate even more repeatable tasks building upon itself.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Build a case for automation. Have verifiable and achievable goals to automate.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use external peers or vendor resources to justify your case.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Empathize with your manager. There might be pressure from her superiors. Partner with her to make her successful&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-fear-of-ownership&quot;&gt;3. Fear of ownership&lt;/h3&gt;

&lt;p&gt;Network IT organizations have forgotten that switches and routers are nothing but computers running specialized applications on them. We have become accustomed to getting a “box” from a vendor, turning it on and tuning it. With downtime translating to revenue loss, network changes were/are always classified “high risk” and subject to excruciating peer-reviews and change control procedures. How many times has improperly configured “redundancy” mechanisms been the root cause for outages? But, there was always a “get out of jail free card” we could use - open a support ticket with the vendor and count on their magic incantations to fix our problems.&lt;/p&gt;

&lt;p&gt;If we use automation one of the biggest fear is not having that “throat to choke”. Meaning, if you wrote a piece of automation and executing it caused an outage, then you are to blame. How do we get around this one? Remember the CTO who wanted to automate all the things? This really means building a culture of trust and moving away from the blame game. When automation causes an outage, that should be a learning opportunity for the organization.&lt;/p&gt;

&lt;p&gt;Another cultural aspect is getting over the idea of buying a box and turning it on - expecting it to automate all the things. Automation within an organization can be very subjective. There might be generalizations but the business objectives will usually determine the automation fingerprint.&lt;/p&gt;

&lt;h3 id=&quot;4-uncharted-hiring-waters&quot;&gt;4. Uncharted hiring waters&lt;/h3&gt;

&lt;p&gt;I alluded to this earlier. Middle managers are comfortable hiring network talent and managing them (they’ve done it before and know what it takes to administer the network). With pressure from superiors, managers are in a dilemma - Should I hire a developer and teach her networks or should I teach my current network resources programming?!&lt;/p&gt;

&lt;p&gt;While I have nothing against hiring of developers to manage a network, I think there is no reason that a current network resource will not be able to pick up programming skills to automate the network. Here are my reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Network engineers are declarative programmers (Configuring BGP is declarative programming)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Network engineers understand distributed databases (OSPF anyone?)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;At a high level, network engineers understand concepts of OOPs and functional logic (QoS policies, PBR?)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For managers to be successful, IMO, they have to take a crash course to get familiar with the technology space. I don’t see another way around it. It does not have to be deeply technical but something like a 3 day workshop to understand version control systems, DevOps methodologies and tools will be extremely beneficial. This could even be entirely a reverse mentoring process; maybe using weekly meetings. You could even bring your team along by organizing internal “hackathons” to solve particular use cases. Turn this around and use it as a recruiting tool to attract talented engineers.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In conclusion, I am convinced that the most resistance organizations are facing in the adoption of network automation is in the middle. I think this can be solved through education and partnering. If you’ve had experiences that were successful or otherwise do share. The community will benefit from our collective understanding of challenges across the board.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Twitter:&lt;/em&gt; &lt;a href=&quot;https://twitter.com/intent/tweet?url=http://localhost:4000/2018/03/19/observations/&amp;amp;text=Please reverse mentor your managers&amp;amp;via=termlen0&quot; target=&quot;_blank&quot;&gt; Share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/termlen0&quot;&gt;
  Follow me on Twitter&lt;/a&gt;!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>NETCONF Ain't YANG</title>
   <link href="http://localhost:4000/2017/07/15/observations/"/>
   <updated>2017-07-15T00:00:00-04:00</updated>
   <id>http://localhost:4000/2017/07/15/observations</id>
   <content type="html">&lt;p&gt;Obvious!&lt;/p&gt;

&lt;p&gt;Recently I was working on  YANG device models, using NETCONF to
interact with the actual device (NXOS 7.0.3.I6.1). I was using
Cisco’s
&lt;a href=&quot;http://www.cisco.com/c/en/us/td/docs/switches/datacenter/nexus9000/sw/7-x/programmability/guide/b_Cisco_Nexus_9000_Series_NX-OS_Programmability_Guide_7x/b_Cisco_Nexus_9000_Series_NX-OS_Programmability_Guide_7x_chapter_010100.html&quot;&gt;NX-OS Programmability Guide&lt;/a&gt; for
the 7.x version. I have had previous experience working with
YANG and Cisco’s NEDs through the tail-f/NSO product and was feeling
quite confident in my understanding of how YANG is being used for
modeling (Either a service or a device) and how NETCONF was one of the
protocols used to interact with the model. 
However, I was getting lost trying to navigate the NXOS’s YANG model
over the NETCONF client. 
&lt;!--more--&gt;
I first attempted to collect the device
capabilities offered by the NETCONF &lt;code&gt;HELLO&lt;/code&gt; and then collect the vlans
configured on the device. Here is a breakdown of my flawed attempt.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I constructed the connectivity parameters as follows:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from ncclient import manager

nc_params = {'allow_agent': False,
 'device_params': {'name': 'nexus'},
 'host': '172.16.30.100',
 'hostkey_verify': False,
 'look_for_keys': False,
 'password': 'admin',
 'port': '22',
 'username': 'admin'}

&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;Established connectivity to the device and collected the capabilities&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;ncm = manager.connect(**nc_params)

In [81]: for capability in ncm.server_capabilities:
   ....:     print capability
   ....:     
urn:ietf:params:netconf:capability:writable-running:1.0
urn:ietf:params:netconf:capability:rollback-on-error:1.0
urn:ietf:params:netconf:capability:validate:1.0
urn:ietf:params:netconf:capability:url:1.0?scheme=file
urn:ietf:params:netconf:base:1.0
urn:ietf:params:netconf:capability:candidate:1.0
urn:ietf:params:netconf:capability:confirmed-commit:1.0
urn:ietf:params:xml:ns:netconf:base:1.0

&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;Devised a filter to collect the vlans configured on the device as
follows:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt; vlans_filter = '''
                   &amp;lt;show&amp;gt;
                     &amp;lt;vlan&amp;gt;
                         &amp;lt;brief\&amp;gt;
                     &amp;lt;/vlan&amp;gt;
                   &amp;lt;/show&amp;gt;
               '''
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;And collected the output as follows:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [85]: ncm.get(('subtree', vlans_filter))
Out[85]: 
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&amp;gt;
&amp;lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; xmlns:if=&quot;http://www.cisco.com/nxos:1.0:if_manager&quot; xmlns:nfcli=&quot;http://www.cisco.com/nxos:1.0:nfcli&quot; xmlns:nxos=&quot;http://www.cisco.com/nxos:1.0&quot; xmlns:vlan_mgr_cli=&quot;http://www.cisco.com/nxos:1.0:vlan_mgr_cli&quot; message-id=&quot;urn:uuid:b1fec116-f94b-4a1f-8c42-964da7c54f26&quot;&amp;gt;
 &amp;lt;data&amp;gt;
  &amp;lt;vlan_mgr_cli:show&amp;gt;
   &amp;lt;vlan_mgr_cli:vlan&amp;gt;
    &amp;lt;vlan_mgr_cli:brief&amp;gt;
     &amp;lt;vlan_mgr_cli:__XML__OPT_Cmd_show_vlan_brief___readonly__&amp;gt;
      &amp;lt;vlan_mgr_cli:__readonly__&amp;gt;
       &amp;lt;vlan_mgr_cli:TABLE_vlanbriefxbrief&amp;gt;
        &amp;lt;vlan_mgr_cli:ROW_vlanbriefxbrief&amp;gt;
         &amp;lt;vlan_mgr_cli:vlanshowbr-vlanid&amp;gt;1&amp;lt;/vlan_mgr_cli:vlanshowbr-vlanid&amp;gt;
         &amp;lt;vlan_mgr_cli:vlanshowbr-vlanid-utf&amp;gt;1&amp;lt;/vlan_mgr_cli:vlanshowbr-vlanid-utf&amp;gt;
         &amp;lt;vlan_mgr_cli:vlanshowbr-vlanname&amp;gt;default&amp;lt;/vlan_mgr_cli:vlanshowbr-vlanname&amp;gt;
         &amp;lt;vlan_mgr_cli:vlanshowbr-vlanstate&amp;gt;active&amp;lt;/vlan_mgr_cli:vlanshowbr-vlanstate&amp;gt;
         &amp;lt;vlan_mgr_cli:vlanshowbr-shutstate&amp;gt;noshutdown&amp;lt;/vlan_mgr_cli:vlanshowbr-shutstate&amp;gt;
         &amp;lt;vlan_mgr_cli:vlanshowplist-ifidx&amp;gt;Ethernet1/1,Ethernet1/2,Ethernet1/3,Ethernet1/4,Ethernet1/5,Ethernet1/6,Ethernet1/7,Ethernet1/8,Ethernet1/9,Ethernet1/10,Ethernet1/11,Ethernet1/12,Ethernet1/13,Ethernet1/14,Ethernet1/15,Ethernet1/16,Ethernet1/17,Ethernet1/18,Ethernet1/19,Ethernet1/20,Ethernet1/21,Ethernet1/22,Ethernet1/23,Ethernet1/24,Ethernet1/25,Ethernet1/26,Ethernet1/27,Ethernet1/28,Ethernet1/29,Ethernet1/30,Ethernet1/31,Ethernet1/32,Ethernet1/33,Ethernet1/34,Ethernet1/35,Ethernet1/36,Ethernet1/37,Ethernet1/38,Ethernet1/39,Ethernet1/40,Ethernet1/41,Ethernet1/42,Ethernet1/43,Ethernet1/44,Ethernet1/45,Ethernet1/46,Ethernet1/47,Ethernet1/48,Ethernet1/49,Ethernet1/50,Ethernet1/51,Ethernet1/52,Ethernet1/53,Ethernet1/54,Ethernet1/55,Ethernet1/56,Ethernet1/57,Ethernet1/58,Ethernet1/59,Ethernet1/60,Ethernet1/61,Ethernet1/62,Ethernet1/63,Ethernet1/64&amp;lt;/vlan_mgr_cli:vlanshowplist-ifidx&amp;gt;
        &amp;lt;/vlan_mgr_cli:ROW_vlanbriefxbrief&amp;gt;
        &amp;lt;vlan_mgr_cli:ROW_vlanbriefxbrief&amp;gt;
         &amp;lt;vlan_mgr_cli:vlanshowbr-vlanid&amp;gt;100&amp;lt;/vlan_mgr_cli:vlanshowbr-vlanid&amp;gt;
         &amp;lt;vlan_mgr_cli:vlanshowbr-vlanid-utf&amp;gt;100&amp;lt;/vlan_mgr_cli:vlanshowbr-vlanid-utf&amp;gt;
         &amp;lt;vlan_mgr_cli:vlanshowbr-vlanname&amp;gt;TEST100&amp;lt;/vlan_mgr_cli:vlanshowbr-vlanname&amp;gt;
         &amp;lt;vlan_mgr_cli:vlanshowbr-vlanstate&amp;gt;active&amp;lt;/vlan_mgr_cli:vlanshowbr-vlanstate&amp;gt;
         &amp;lt;vlan_mgr_cli:vlanshowbr-shutstate&amp;gt;noshutdown&amp;lt;/vlan_mgr_cli:vlanshowbr-shutstate&amp;gt;
        &amp;lt;/vlan_mgr_cli:ROW_vlanbriefxbrief&amp;gt;
        &amp;lt;vlan_mgr_cli:ROW_vlanbriefxbrief&amp;gt;
         &amp;lt;vlan_mgr_cli:vlanshowbr-vlanid&amp;gt;101&amp;lt;/vlan_mgr_cli:vlanshowbr-vlanid&amp;gt;
         &amp;lt;vlan_mgr_cli:vlanshowbr-vlanid-utf&amp;gt;101&amp;lt;/vlan_mgr_cli:vlanshowbr-vlanid-utf&amp;gt;
         &amp;lt;vlan_mgr_cli:vlanshowbr-vlanname&amp;gt;TEST101&amp;lt;/vlan_mgr_cli:vlanshowbr-vlanname&amp;gt;
         &amp;lt;vlan_mgr_cli:vlanshowbr-vlanstate&amp;gt;active&amp;lt;/vlan_mgr_cli:vlanshowbr-vlanstate&amp;gt;
         &amp;lt;vlan_mgr_cli:vlanshowbr-shutstate&amp;gt;noshutdown&amp;lt;/vlan_mgr_cli:vlanshowbr-shutstate&amp;gt;
        &amp;lt;/vlan_mgr_cli:ROW_vlanbriefxbrief&amp;gt;
        &amp;lt;vlan_mgr_cli:ROW_vlanbriefxbrief&amp;gt;
         &amp;lt;vlan_mgr_cli:vlanshowbr-vlanid&amp;gt;102&amp;lt;/vlan_mgr_cli:vlanshowbr-vlanid&amp;gt;
         &amp;lt;vlan_mgr_cli:vlanshowbr-vlanid-utf&amp;gt;102&amp;lt;/vlan_mgr_cli:vlanshowbr-vlanid-utf&amp;gt;
         &amp;lt;vlan_mgr_cli:vlanshowbr-vlanname&amp;gt;TEST102&amp;lt;/vlan_mgr_cli:vlanshowbr-vlanname&amp;gt;
         &amp;lt;vlan_mgr_cli:vlanshowbr-vlanstate&amp;gt;active&amp;lt;/vlan_mgr_cli:vlanshowbr-vlanstate&amp;gt;
         &amp;lt;vlan_mgr_cli:vlanshowbr-shutstate&amp;gt;noshutdown&amp;lt;/vlan_mgr_cli:vlanshowbr-shutstate&amp;gt;
        &amp;lt;/vlan_mgr_cli:ROW_vlanbriefxbrief&amp;gt;
       &amp;lt;/vlan_mgr_cli:TABLE_vlanbriefxbrief&amp;gt;
      &amp;lt;/vlan_mgr_cli:__readonly__&amp;gt;
     &amp;lt;/vlan_mgr_cli:__XML__OPT_Cmd_show_vlan_brief___readonly__&amp;gt;
    &amp;lt;/vlan_mgr_cli:brief&amp;gt;
   &amp;lt;/vlan_mgr_cli:vlan&amp;gt;
  &amp;lt;/vlan_mgr_cli:show&amp;gt;
 &amp;lt;/data&amp;gt;
&amp;lt;/rpc-reply&amp;gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see from the output, I am getting the vlan information back
correctly (you can see details for vlan 1, 100, 101 &amp;amp; 102). However I
was expecting this to conform to the yang model from the &lt;a href=&quot;https://github.com/YangModels/yang/blob/master/vendor/cisco/nx/7.0-3-I6-1/Cisco-NX-OS-device.yang&quot;&gt;published Model&lt;/a&gt;
and the output was nowhere close.&lt;/p&gt;

&lt;p&gt;After much searching on the web I ran into two of my colleagues’
blogs :&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/jedelman8&quot;&gt;Jason’s&lt;/a&gt; &lt;a href=&quot;http://jedelman.com/home/netconf-and-the-ncclient/&quot;&gt;blog from over 2 years ago! &lt;/a&gt; and&lt;/li&gt;
  &lt;li&gt;A &lt;a href=&quot;https://projectme10.wordpress.com/2017/03/06/cisco-wants-you-to-use-apis-and-it-shows/&quot;&gt;more recent post from&lt;/a&gt; &lt;a href=&quot;https://twitter.com/GabrieleGerbino&quot;&gt;Gabriele&lt;/a&gt; )&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;(This is truly one of the best parts of my job really; working with folks
much smarter than yourself)&lt;/p&gt;

&lt;p&gt;After a quick chat with Jason I realized the source of my confusion. I
was simply interacting with a NETCONF enabled XML API (exposing a XML
schema) on NXOS and not
the YANG model. I was getting somewhere. Revisiting the Cisco
documentation, I noticed that I had overlooked the connectivity port
parameter needed to interact with the nexus switch, for YANG!
So to appears that once the NETCONF agent is enabled on the switch,
Cisco has provided us with an option of programmatically interacting
with the device over NETCONF either over port 22 or port 830. If you
connect over port 22, you can use the XML Schema Database (XSD) over NETCONF
whereas over port 830, you can use the YANG Model.&lt;/p&gt;

&lt;p&gt;So here is the correct way to interact with the NXOS using NETCONF and
YANG:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Establish the connectivity over port 830&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;params = {'allow_agent': False,
 'device_params': {'name': 'nexus'},
 'host': '172.16.30.100',
 'hostkey_verify': False,
 'look_for_keys': False,
 'password': 'admin',
 'port': '830',
 'username': 'admin'}

m = manager.connect(**params)
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;Look at the offered capabilities (contrast it with the previous
section)&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;In [88]: for capability in m.server_capabilities:
   ....:     print capability
   ....:     
urn:ietf:params:netconf:capability:writable-running:1.0
http://openconfig.net/yang/vlan?revision=2016-05-26&amp;amp;module=openconfig-vlan&amp;amp;deviations=openconfig-vlan-deviations
urn:ietf:params:netconf:capability:rollback-on-error:1.0
urn:ietf:params:netconf:capability:confirmed-commit:1.1
urn:ietf:params:netconf:capability:validate:1.1
http://openconfig.net/yang/local-routing?revision=2016-05-11&amp;amp;module=openconfig-local-routing&amp;amp;deviations=openconfig-local-routing-deviations
http://openconfig.net/yang/bgp-multiprotocol?revision=2016-06-06&amp;amp;module=openconfig-bgp-multiprotocol&amp;amp;deviations=openconfig-bgp-multiprotocol-deviations
urn:ietf:params:netconf:base:1.0
urn:ietf:params:netconf:base:1.1
urn:ietf:params:netconf:capability:candidate:1.0
http://openconfig.net/yang/routing-policy?revision=2016-05-12&amp;amp;module=openconfig-routing-policy&amp;amp;deviations=openconfig-routing-policy-deviations
http://openconfig.net/yang/bgp?revision=2016-06-06&amp;amp;module=openconfig-bgp&amp;amp;deviations=openconfig-bgp-deviations
http://openconfig.net/yang/interfaces?revision=2016-05-26&amp;amp;module=openconfig-interfaces&amp;amp;deviations=openconfig-interfaces-deviations
http://openconfig.net/yang/interfaces/ip?revision=2016-05-26&amp;amp;module=openconfig-if-ip&amp;amp;deviations=openconfig-if-ip-deviations
http://cisco.com/ns/yang/cisco-nx-os-device?revision=2017-05-16&amp;amp;module=cisco-nx-os-device&amp;amp;deviations=cisco-nx-os-device-deviations

&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
  &lt;li&gt;Use the appropriate namespace to collect the vlan information:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;vf = &quot;&quot;&quot;&amp;lt;filter type=&quot;subtree&quot;&amp;gt;
                &amp;lt;System xmlns=&quot;http://cisco.com/ns/yang/cisco-nx-os-device&quot;&amp;gt;
                        &amp;lt;stp-items&amp;gt;
                            &amp;lt;inst-items&amp;gt;
                              &amp;lt;vlan-items&amp;gt;
                                  &amp;lt;Vlan-list/&amp;gt;
                              &amp;lt;/vlan-items&amp;gt;
                            &amp;lt;/inst-items&amp;gt;
                        &amp;lt;/stp-items&amp;gt;
                &amp;lt;/System&amp;gt; 
            &amp;lt;/filter&amp;gt;
 &quot;&quot;&quot;
m.get(vf)

&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;rpc-reply xmlns:if=&quot;http://www.cisco.com/nxos:1.0:if_manager&quot; xmlns:nfcli=&quot;http://www.cisco.com/nxos:1.0:nfcli&quot; xmlns:nxos=&quot;http://www.cisco.com/nxos:1.0&quot; xmlns:vlan_mgr_cli=&quot;http://www.cisco.com/nxos:1.0:vlan_mgr_cli&quot; xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;urn:uuid:2bdcccfb-e1b7-4d5c-a56d-081410edf08a&quot;&amp;gt;
    &amp;lt;data&amp;gt;
        &amp;lt;System xmlns=&quot;http://cisco.com/ns/yang/cisco-nx-os-device&quot;&amp;gt;
            &amp;lt;stp-items&amp;gt;
                &amp;lt;inst-items&amp;gt;
                    &amp;lt;vlan-items&amp;gt;
                        &amp;lt;Vlan-list&amp;gt;
                            &amp;lt;id&amp;gt;101&amp;lt;/id&amp;gt;
                            &amp;lt;adminSt&amp;gt;enabled&amp;lt;/adminSt&amp;gt;
                            &amp;lt;bridgeAddress&amp;gt;00:00:00:00:00:00&amp;lt;/bridgeAddress&amp;gt;
                            &amp;lt;diameter&amp;gt;2&amp;lt;/diameter&amp;gt;
                            &amp;lt;fwdTime&amp;gt;15&amp;lt;/fwdTime&amp;gt;
                            &amp;lt;helloTime&amp;gt;2&amp;lt;/helloTime&amp;gt;
                            &amp;lt;maxAge&amp;gt;20&amp;lt;/maxAge&amp;gt;
                            &amp;lt;operErr/&amp;gt;
                            &amp;lt;priority&amp;gt;32768&amp;lt;/priority&amp;gt;
                            &amp;lt;protocol&amp;gt;unknown&amp;lt;/protocol&amp;gt;
                            &amp;lt;root&amp;gt;primary&amp;lt;/root&amp;gt;
                            &amp;lt;rootAddress&amp;gt;00:00:00:00:00:00&amp;lt;/rootAddress&amp;gt;
                            &amp;lt;rootPathCost&amp;gt;0&amp;lt;/rootPathCost&amp;gt;
                            &amp;lt;rootPort&amp;gt;unspecified&amp;lt;/rootPort&amp;gt;
                            &amp;lt;rootPortNumber&amp;gt;0&amp;lt;/rootPortNumber&amp;gt;
                        &amp;lt;/Vlan-list&amp;gt;
                        &amp;lt;Vlan-list&amp;gt;
                            &amp;lt;id&amp;gt;1&amp;lt;/id&amp;gt;
                            &amp;lt;adminSt&amp;gt;enabled&amp;lt;/adminSt&amp;gt;
                            &amp;lt;bridgeAddress&amp;gt;08:00:27:88:8B:E1&amp;lt;/bridgeAddress&amp;gt;
                            &amp;lt;bridgePriority&amp;gt;32769&amp;lt;/bridgePriority&amp;gt;
                            &amp;lt;diameter&amp;gt;2&amp;lt;/diameter&amp;gt;
                            &amp;lt;fwdTime&amp;gt;15&amp;lt;/fwdTime&amp;gt;
                            &amp;lt;helloTime&amp;gt;2&amp;lt;/helloTime&amp;gt;
                            &amp;lt;if-items&amp;gt;
                                &amp;lt;VlanIf-list&amp;gt;
                                    &amp;lt;id&amp;gt;eth1/1&amp;lt;/id&amp;gt;
                                    &amp;lt;designatedBridgeAddress&amp;gt;08:00:27:88:8B:E1&amp;lt;/designatedBridgeAddress&amp;gt;
                                    &amp;lt;designatedBridgePriority&amp;gt;32769&amp;lt;/designatedBridgePriority&amp;gt;
                                    &amp;lt;designatedPortNumber&amp;gt;1&amp;lt;/designatedPortNumber&amp;gt;
                                    &amp;lt;designatedPortPriority&amp;gt;128&amp;lt;/designatedPortPriority&amp;gt;
                                    &amp;lt;designatedRootAddress&amp;gt;08:00:27:88:8B:E1&amp;lt;/designatedRootAddress&amp;gt;
                                    &amp;lt;designatedRootCost&amp;gt;0&amp;lt;/designatedRootCost&amp;gt;
                                    &amp;lt;designatedRootPriority&amp;gt;32769&amp;lt;/designatedRootPriority&amp;gt;
                                    &amp;lt;portNumber&amp;gt;1&amp;lt;/portNumber&amp;gt;
                                    &amp;lt;portPathCost&amp;gt;4&amp;lt;/portPathCost&amp;gt;
                                    &amp;lt;portPriority&amp;gt;128&amp;lt;/portPriority&amp;gt;
                                    &amp;lt;portRole&amp;gt;designated&amp;lt;/portRole&amp;gt;
                                    &amp;lt;portState&amp;gt;disabled&amp;lt;/portState&amp;gt;
                                &amp;lt;/VlanIf-list&amp;gt;
                            &amp;lt;/if-items&amp;gt;
                            &amp;lt;maxAge&amp;gt;20&amp;lt;/maxAge&amp;gt;
                            &amp;lt;operErr/&amp;gt;
                            &amp;lt;priority&amp;gt;32768&amp;lt;/priority&amp;gt;
                            &amp;lt;protocol&amp;gt;rstp&amp;lt;/protocol&amp;gt;
                            &amp;lt;root&amp;gt;primary&amp;lt;/root&amp;gt;
                            &amp;lt;rootAddress&amp;gt;08:00:27:88:8B:E1&amp;lt;/rootAddress&amp;gt;
                            &amp;lt;rootPathCost&amp;gt;0&amp;lt;/rootPathCost&amp;gt;
                            &amp;lt;rootPort&amp;gt;unspecified&amp;lt;/rootPort&amp;gt;
                            &amp;lt;rootPortNumber&amp;gt;0&amp;lt;/rootPortNumber&amp;gt;
                            &amp;lt;rootPortPriority&amp;gt;0&amp;lt;/rootPortPriority&amp;gt;
                            &amp;lt;rootPriority&amp;gt;32769&amp;lt;/rootPriority&amp;gt;
                        &amp;lt;/Vlan-list&amp;gt;
                        &amp;lt;Vlan-list&amp;gt;
                            &amp;lt;id&amp;gt;102&amp;lt;/id&amp;gt;
                            &amp;lt;adminSt&amp;gt;enabled&amp;lt;/adminSt&amp;gt;
                            &amp;lt;bridgeAddress&amp;gt;00:00:00:00:00:00&amp;lt;/bridgeAddress&amp;gt;
                            &amp;lt;diameter&amp;gt;2&amp;lt;/diameter&amp;gt;
                            &amp;lt;fwdTime&amp;gt;15&amp;lt;/fwdTime&amp;gt;
                            &amp;lt;helloTime&amp;gt;2&amp;lt;/helloTime&amp;gt;
                            &amp;lt;maxAge&amp;gt;20&amp;lt;/maxAge&amp;gt;
                            &amp;lt;operErr/&amp;gt;
                            &amp;lt;priority&amp;gt;32768&amp;lt;/priority&amp;gt;
                            &amp;lt;protocol&amp;gt;unknown&amp;lt;/protocol&amp;gt;
                            &amp;lt;root&amp;gt;primary&amp;lt;/root&amp;gt;
                            &amp;lt;rootAddress&amp;gt;00:00:00:00:00:00&amp;lt;/rootAddress&amp;gt;
                            &amp;lt;rootPathCost&amp;gt;0&amp;lt;/rootPathCost&amp;gt;
                            &amp;lt;rootPort&amp;gt;unspecified&amp;lt;/rootPort&amp;gt;
                            &amp;lt;rootPortNumber&amp;gt;0&amp;lt;/rootPortNumber&amp;gt;
                        &amp;lt;/Vlan-list&amp;gt;
                        &amp;lt;Vlan-list&amp;gt;
                            &amp;lt;id&amp;gt;100&amp;lt;/id&amp;gt;
                            &amp;lt;adminSt&amp;gt;enabled&amp;lt;/adminSt&amp;gt;
                            &amp;lt;bridgeAddress&amp;gt;00:00:00:00:00:00&amp;lt;/bridgeAddress&amp;gt;
                            &amp;lt;diameter&amp;gt;2&amp;lt;/diameter&amp;gt;
                            &amp;lt;fwdTime&amp;gt;15&amp;lt;/fwdTime&amp;gt;
                            &amp;lt;helloTime&amp;gt;2&amp;lt;/helloTime&amp;gt;
                            &amp;lt;maxAge&amp;gt;20&amp;lt;/maxAge&amp;gt;
                            &amp;lt;operErr/&amp;gt;
                            &amp;lt;priority&amp;gt;32768&amp;lt;/priority&amp;gt;
                            &amp;lt;protocol&amp;gt;unknown&amp;lt;/protocol&amp;gt;
                            &amp;lt;root&amp;gt;primary&amp;lt;/root&amp;gt;
                            &amp;lt;rootAddress&amp;gt;00:00:00:00:00:00&amp;lt;/rootAddress&amp;gt;
                            &amp;lt;rootPathCost&amp;gt;0&amp;lt;/rootPathCost&amp;gt;
                            &amp;lt;rootPort&amp;gt;unspecified&amp;lt;/rootPort&amp;gt;
                            &amp;lt;rootPortNumber&amp;gt;0&amp;lt;/rootPortNumber&amp;gt;
                        &amp;lt;/Vlan-list&amp;gt;
                    &amp;lt;/vlan-items&amp;gt;
                &amp;lt;/inst-items&amp;gt;
            &amp;lt;/stp-items&amp;gt;
        &amp;lt;/System&amp;gt;
    &amp;lt;/data&amp;gt;
&amp;lt;/rpc-reply&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see from this output, the data conforms to the yang model
as follows (only a section shown)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;       +--rw stp-items
       |  +--rw name?         naming_Name
       |  +--rw adminSt?      nw_AdminSt
       |  +--ro operSt?       nw_EntOperSt
       |  +--ro operErr?      nw_OperErrQual
       |  +--rw inst-items
       |     +--rw vlan-items
       |        +--rw Vlan-list* [id]
       |           +--rw id                  stp_VlanId
       |           +--rw priority?           stp_Priority
       |           +--rw root?               stp_Root
       |           +--rw diameter?           stp_Diameter
       |           +--ro operErr?            nw_OperErrQual
       |           +--ro protocol?           stp_Protocol
       |           +--rw bridgePriority?     uint16
       |           +--ro bridgeAddress?      address_Mac
       |           +--rw rootPriority?       uint16
       |           +--ro rootAddress?        address_Mac
       |           +--rw rootPortPriority?   uint16
       |           +--ro rootPortNumber?     uint16
       |           +--ro rootPort?           nw_IfId
       |           +--ro rootPathCost?       uint32
       |           +--rw adminSt?            nw_AdminSt
       |           +--rw fwdTime?            stp_FwdTime
       |           +--rw helloTime?          stp_HelloTime
       |           +--rw maxAge?             stp_MaxAge
       |           +--rw if-items
       |              +--ro VlanIf-list* [id]
       |                 +--ro id                          nw_IfId
       |                 +--ro designatedRootPriority?     uint16

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Please Note: I have edited the output of pyang -f tree to highlight the significant portions for this post&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In summary, be vigilant about the API schema you are working with. It
is very easy (especially for most of us who are just getting started),
to not realize whether we are dealing with a YANG model or a XSD
schema. Hopefully this post highlights the difference and helps
further our collective understanding. Appreciate your feedback!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Twitter:&lt;/em&gt; &lt;a href=&quot;https://twitter.com/intent/tweet?url=http://localhost:4000/2017/07/15/observations/&amp;amp;text=NETCONF Ain't YANG&amp;amp;via=termlen0&quot; target=&quot;_blank&quot;&gt; Share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/termlen0&quot;&gt;
  Follow me on Twitter&lt;/a&gt;!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>OT - A quick post on using gpg to manage github in Linux</title>
   <link href="http://localhost:4000/2017/04/20/observations/"/>
   <updated>2017-04-20T00:00:00-04:00</updated>
   <id>http://localhost:4000/2017/04/20/observations</id>
   <content type="html">&lt;p&gt;After being used to OSX Keychains in my old mac, I wanted a similar
functionality on my Linux laptop. Being prompted each time to login,
while interacting with &lt;a href=&quot;https://github.com&quot;&gt;github&lt;/a&gt; for instance was
annoying. Searching the web, led me to
&lt;a href=&quot;https://git-scm.com/docs/git-credential-store&quot;&gt;git-credential-store&lt;/a&gt;.
I was not too happy with the fact that credentials would be stored in
clear text, locally, indefinitely. I came across this stackoverflow
&lt;a href=&quot;http://stackoverflow.com/questions/5343068/is-there-a-way-to-skip-password-typing-when-using-https-on-github/18362082#18362082&quot;&gt;post&lt;/a&gt; that
I adapted for Linux. The concept is as follows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use a .netrc file to store your credentials. This follows the
file format for &lt;a href=&quot;https://www.ibm.com/support/knowledgecenter/SSB27U_6.2.0/com.ibm.zvm.v620.kijl0/netrcd.htm#netrcd&quot;&gt;netrc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Encrypt this file,
using &lt;a href=&quot;https://www.gnupg.org/&quot;&gt;GNU Privacy Guard&lt;/a&gt;
&lt;!--more--&gt;&lt;/li&gt;
  &lt;li&gt;Download and add the
&lt;a href=&quot;https://raw.githubusercontent.com/git/git/master/contrib/credential/netrc/git-credential-netrc&quot;&gt;git credential helper script&lt;/a&gt; to
your path.&lt;/li&gt;
  &lt;li&gt;Update git config to tell it to use the encrypted credentials file&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;step-1-the-netrc-file&quot;&gt;STEP 1: The .netrc file&lt;/h3&gt;
&lt;p&gt;As described in the link above, the .netrc file follows a standard and
looks like this: &lt;a href=&quot;/assets/gpg3.png&quot;&gt;&lt;img src=&quot;/assets/gpg3.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We save this in our home directory - this is obviously clear-text. We will now
encrypt the file and delete the clear-text one&lt;/p&gt;

&lt;h3 id=&quot;step-2-encrypt-the-netrc-file&quot;&gt;STEP 2: Encrypt the .netrc file&lt;/h3&gt;
&lt;p&gt;GNU Privacy Guard, was new to me. Solving this specific problem also
taught me about how to use GPG in general to sign and encrypt any
piece of data that needs to be exchanged securely. The basic premise
is we create a public/private key pair, similar to SSH. This is stored
in a “key-ring” on our computer. We can potentially add other trusted
public-keys to this key-ring and decrypt/verify files that are signed
by the sender’s private key.
For our example, here is how I did it:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;GENERATE THE KEY PAIRS&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/gpg1.png&quot;&gt;&lt;img src=&quot;/assets/gpg1.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;After moving the mouse around for a bit:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/gpg2.png&quot;&gt;&lt;img src=&quot;/assets/gpg2.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can see the keyring :&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/gpg4.png&quot;&gt;&lt;img src=&quot;/assets/gpg4.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Now we can use our private key to encrypt the .netrc file&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/gpg5.png&quot;&gt;&lt;img src=&quot;/assets/gpg5.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(I had to specify a recipient. In our case since github was going to
use my email id as the ‘end-user’ to decrypt the .netrc file, I
specified it as the recipient)&lt;/p&gt;

&lt;p&gt;At this point, you may delete your clear text .netrc and will be left
with a .netrc.gpg file&lt;/p&gt;

&lt;h3 id=&quot;step-3-download-and-add-the-git-credential-helper&quot;&gt;STEP 3: Download and add the git credential helper:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/git/git/master/contrib/credential/netrc/git-credential-netrc&quot;&gt;This perl script&lt;/a&gt; is
used by git to unencrypt the .netrc.gpg file. So you will need to make
it executable and store it in a directory in your &lt;code&gt;$PATH&lt;/code&gt;
variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;curl -o /home/ajay/bin/git-credential-netrc https://raw.github.com/git/git/master/contrib/credential/net‌​rc/git-credential-ne‌​trc
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;step-4-tell-git-about-the-encrypted-credentials&quot;&gt;STEP 4: Tell git about the encrypted credentials&lt;/h3&gt;
&lt;p&gt;Finally, you use the git config command to inform git to use the
credential helper. This is when you also point it to the location of
the newly encrypted .netrc.gpg file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;git config --local credential.helper &quot;netrc -f /home/ajay/.netrc.gpg -v -d&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;( The -v and -d are diagnostic flags - verbose/debug. This helps you
track issues if you run into any. )&lt;/p&gt;

&lt;p&gt;If you happen to follow these steps and if you had any questions, I
would be happy to help and hopefully better my understanding as well.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Twitter:&lt;/em&gt; &lt;a href=&quot;https://twitter.com/intent/tweet?url=http://localhost:4000/2017/04/20/observations/&amp;amp;text=OT - A quick post on using gpg to manage github in Linux&amp;amp;via=termlen0&quot; target=&quot;_blank&quot;&gt; Share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/termlen0&quot;&gt;
  Follow me on Twitter&lt;/a&gt;!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Test Driven Development (TDD) for networks,  using Ansible</title>
   <link href="http://localhost:4000/2017/04/12/observations/"/>
   <updated>2017-04-12T00:00:00-04:00</updated>
   <id>http://localhost:4000/2017/04/12/observations</id>
   <content type="html">&lt;p&gt;In it’s most basic form, TDD works as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. Envision the outcome of what you are developing [ Adding a VLAN
   to a switch ]
2. Write a test to validate that outcome [ Is the desired VLAN on
   the switch ]
3. Run the playbook, to invoke the test [ it will fail - RED test
   ]
4. Refactor your code [ write the roles/tasks needed for the tests
   to pass ]
5. Re-run tests [role] to ensure that they now pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this post, I hope to share my observations on how I used ansible to
implement this using roles. I start with known facts/assumptions:&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;em&gt;ASSUMPTION:&lt;/em&gt; Given that the VLAN to be added is 101, it should be
applied to devices &lt;code&gt;nxos-spine1 &amp;amp; nxos-spine2&lt;/code&gt; and stp priority
set as &lt;code&gt;4096&lt;/code&gt; and &lt;code&gt;8192&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;Following the basic rules listed out at the start of this post let’s
translate that to ansible code:&lt;/p&gt;

&lt;p&gt;(Only snippets are on the blog, for the full playbook, please see &lt;a href=&quot;https://github.com/termlen0/TDD_ansible&quot;&gt;repo&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Though the focus of this post is to demonstrate TDD methodologies -  and
how we might use them in developing network configurations -  it also
introduces stratergies around using roles, tags and the *reusability*
of roles.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;STEP1&lt;/em&gt;: Start with a playbook that calls a role named validation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;- assert:
    that:
      - &quot; {{ desired_vlan }} in  vlan_list &quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-diff&quot;&gt;TASK [validate : assert] *******************************************************
- fatal: [nxos-spine1]: FAILED! =&amp;gt; {
-    &quot;assertion&quot;: &quot;'101' in vlan_list &quot;,
-    &quot;changed&quot;: false,
-    &quot;evaluated_to&quot;: false,
-    &quot;failed&quot;: true
- }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, our playbook dir looks as follows&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;.
├── inventory
├── pb.yaml
└── roles
    └── validate
        └── tasks
            ├── main.yaml
            └── vlantest.yaml

3 directories, 4 files

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;STEP2&lt;/em&gt;: Now, refactor the playbook to add the VLAN  to the switches&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-diff&quot;&gt;TASK [add_vlan : Add the desired vlan to the switch] ***************************
+ ok: [nxos-spine1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And our playbook at this point has the following structure&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;.
├── inventory
├── pb.yaml
└── roles
    ├── add_vlan
    │   └── tasks
    │       └── main.yaml
    └── validate
        └── tasks
            ├── main.yaml
            └── vlantest.yaml

5 directories, 5 files

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;STEP3&lt;/em&gt;: Now, rerun the playbook, with the validation role and observe
that all tests pass, in other words, the “GREEN” test.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-diff&quot;&gt;TASK [validate : assert] *******************************************************
+ ok: [nxos-spine1] =&amp;gt; {
+     &quot;changed&quot;: false,
+     &quot;msg&quot;: &quot;All assertions passed&quot;
+ }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: Here is how I am invoking my playbook for each step&lt;/p&gt;

&lt;p&gt;&lt;em&gt;STEP1&lt;/em&gt;: &lt;code&gt;ansible-playbook -i inventory pb.yaml  --tags=test&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;STEP2&lt;/em&gt;: &lt;code&gt;ansible-playbook -i inventory pb.yaml  --tags=add&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;STEP3&lt;/em&gt;: &lt;code&gt;ansible-playbook -i inventory pb.yaml  --tags=test&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The playbook uses 2 roles that have tags associated with them&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;roles:

    - role: validate
      tags: test
    - role: add_vlan
      tags: add

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, pay attention to how the &lt;code&gt;main.yaml&lt;/code&gt; in the validate role
is including all other yaml files that match *test.yaml. The
implication is, that as your playbook scope expands, you can continue
writing simple, units of test code and name them to match *test.yaml
(for instance bgptest.yaml etc). If your team collects unit tests at a
particular location, you now have a &lt;em&gt;reusable&lt;/em&gt; unit of code, allowing
you to reuse this role in any playbook&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;
- name: Include all the test files
  include: &quot; {{ outer_item  }} &quot;
  with_fileglob:
    - &quot;/vagrant/dhcp_helper/roles/validate/tasks/*test.yaml&quot;
  loop_control:
    loop_var: outer_item

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are using a loop to include all the test files and we are replacing
the standard &lt;em&gt;{{ item }}&lt;/em&gt; var with &lt;em&gt;{{ outer_item }}&lt;/em&gt; - Why?
If the unit test files you are including through this loop themselves
contain a loop, the value of &lt;em&gt;{{ item }}&lt;/em&gt; main will be passed into
the unit test yaml. So we are explicitly setting the loop control
variable in main to yaml to &lt;em&gt;{{ outer_yaml }}&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Twitter:&lt;/em&gt; &lt;a href=&quot;https://twitter.com/intent/tweet?url=http://localhost:4000/2017/04/12/observations/&amp;amp;text=Test Driven Development (TDD) for networks,  using Ansible&amp;amp;via=termlen0&quot; target=&quot;_blank&quot;&gt; Share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/termlen0&quot;&gt;
  Follow me on Twitter&lt;/a&gt;!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Of state, idempotency, and CI/CD in the brownfield network</title>
   <link href="http://localhost:4000/2017/02/03/observations/"/>
   <updated>2017-02-03T00:00:00-05:00</updated>
   <id>http://localhost:4000/2017/02/03/observations</id>
   <content type="html">&lt;p&gt;This post is a consequence of an interesting conversation around
declarative control systems with a colleague. Throughout the
conversation, we kept coming back to the ‘popularity’ of automation
and specifically, how revolutionary, it appears for legacy, closed
systems(aka 80% of network gear in enterprises). When you think about it,
in a traditional control system (a bread toaster, in it’s simplest
form), we interact with the system as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. We tell it (declare) what our desired outcome is (how brown do you
want your toast)
2. Inputs (the slices of bread)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The system then figures out how to achieve your end state. In other
words..&lt;/p&gt;

&lt;!--more--&gt;

&lt;pre&gt;&lt;code&gt;    * EndState -&amp;gt; System
    * System determines current state and calculates diff to achieve end
    state
    * System then does: Current State +/- diffs, to achieve end state
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;imperative-and-declarative-systems&quot;&gt;Imperative and declarative systems&lt;/h2&gt;
&lt;p&gt;Lately I have been working a lot with ansible, with a specific focus
on network devices that natively do not have good/any api: Cisco
routers and switches, in particular. If you are familiar, you already
know, that the core ansible modules are idempotent. Ansible does this,
by getting the current state of the device before execution,
validating whether the differences to be applied, are already present,
and if not, applying them.  Going back to the earlier discussion on
control systems, it is pretty obvious that the way we achieve the “end
state” in ansible is quite different. Here, no desired/endstate is given
to the system. The operator calculates the differences that need to be
applied and gives it to the system. The system then assures that, the
requested differences are currently not present in the devices and
applies them.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    * Differences -&amp;gt; System.
    * System collects the current state
    * System validates that differences do not exist in the current
    state
    * System adds the differences
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I specifically say that the system &lt;strong&gt;adds&lt;/strong&gt; the differences. What I am
trying to point out, is the non-declarative nature here. For a real
example, if I have to remove a bgp neigbor through ansible, I have to
say&lt;/p&gt;

&lt;p&gt;&lt;code&gt;no ip bgp neighbor x.x.x.x&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Rather than being able to define the end state, where I tell the
system how I would like the device configuration to look like, I have
to tell it specifically, what needs to happen. This is not a
flaw/drawback. I am just pointing out the nature of closed systems.
Contrast this with a system dealing with configuration files. You can
define your end state, simply by writing the configuration file, the
way you want it to be on the system. The automation tool’s job is to
identify the differences and then decide whether configs need to be
applied or removed to the end host - &lt;em&gt;declarative&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;so-what-and-are-there-declarative-nw-automation-options&quot;&gt;So what and are there declarative n/w automation options?&lt;/h2&gt;
&lt;p&gt;Declarative systems are IMO, elegant, and embody
automation/abstraction better than imperative systems. However you
have lesser control over the how (your toaster makes the call about
the temperature to brown your bread).
In the past, I have built a few automated services
using
&lt;a href=&quot;http://www.cisco.com/c/en/us/solutions/service-provider/solutions-cloud-providers/network-services-orchestrator-solutions.html&quot;&gt;tail-f systems&lt;/a&gt;
This product helps the operator build network services, in a
quasi-declarative fashion. The way it achieves this, is that the tool,
caches/persists the current state of devices locally. When the
operator drives a change, the tool, validates the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. Does the current state on the devices match the cached configs
2. If yes; calculate the difference, stage the config locally,
   push to end device
3. If no; the operator has the option to treat the cached config
   as the source of truth *OR* the current device state as the
   source of truth
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This brings me to the concept of state. In a
&lt;a href=&quot;https://termlen0.github.io/2016/12/28/observations/&quot;&gt;previous&lt;/a&gt;
post, I talked about stateful variable tracking for network
equipment. However, how do we track configuration state?&lt;/p&gt;

&lt;h2 id=&quot;crud-and-the-database-analogy&quot;&gt;CRUD and the database analogy&lt;/h2&gt;
&lt;p&gt;With tailf, having a cached copy of the “state” of the device, allows
the operator to treat the end devices as rows in a database. So you
have the ability to “commit” your changes and “rollback” when errors
are encountered. However from an automation tool standpoint, I want to
decouple the “state” from the tool.
I believe such a declarative system can be
achieved using a version control system + an imperative tool. For
example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. The state of a topology is saved in say, github.
2. A change to the system is requested via a pull request. Note
   that this is a declaration of the desired end state, which is
   calculated by some imperative system, like the ansible cisco
   core modules.
3. The CI/CD tool chain evaluates the requested endstate validity,
   allowing the operator the opportunity to effect corrections.
4. The desired end state is achieved and subsequently stored at
   the &quot;Source of Truth&quot; - github in this case.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I am not sure how exactly, to handle out of band changes. The
possibility exists, for writing playbooks, that can potentially
overwrite the device configs with the configs stored in github or
update github, with the current device state.&lt;/p&gt;

&lt;p&gt;Another point of consideration, comparing network devices to
databases, makes one think of how tightly coupled the “data” and the
“configuration” is on network devices. I had not thought about a
firewall rule in such terms, until this conversation with my
colleague. The configuration of a database is very much decoupled from
the data, whereas the configuration (permit traffic) and data
(source/destination IP/PORTS) are extremely tightly coupled on network
devices - food for thought!&lt;/p&gt;

&lt;p&gt;I would love to hear your thoughts on the state of network automation
for closed systems like routers and switches. Also feedback on this
thought exercise would be awesome.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Twitter:&lt;/em&gt; &lt;a href=&quot;https://twitter.com/intent/tweet?url=http://localhost:4000/2017/02/03/observations/&amp;amp;text=Of state, idempotency, and CI/CD in the brownfield network&amp;amp;via=termlen0&quot; target=&quot;_blank&quot;&gt; Share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/termlen0&quot;&gt;
  Follow me on Twitter&lt;/a&gt;!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>The need for a stateful variable tracker and an implementation example</title>
   <link href="http://localhost:4000/2016/12/28/observations/"/>
   <updated>2016-12-28T00:00:00-05:00</updated>
   <id>http://localhost:4000/2016/12/28/observations</id>
   <content type="html">&lt;p&gt;When it comes to automation role models, network engineers have often looked up,
to our compute brethren. For decades, compute admins have had tools that allowed
them to execute scripts on systems at particular times: typically backups,
rsync etc. More recently, in the VM universe,  DevOps tools like Chef/Puppet/
Ansible, have empowered ‘Developer Administrators’, to stand up the entire app
stack, automatically.&lt;/p&gt;

&lt;p&gt;In my network automation journey, I realized early on that, a big gap/obstacle
for network automation is the need for a backend, to track positive
integers; a source of truth, that knows what numeric value was last&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;assigned to a particular network &lt;em&gt;service&lt;/em&gt;(viz. firewall contexts,
vlans etc  for a 3 tier app in the DMZ. Traditional networks are
relatively static(from a configuration
standpoint). We typically make incremental changes to &lt;em&gt;variables&lt;/em&gt; in a production
network configuration. For instance, once a port-channel
is created, say Po101, we typically have some internal standard as to how the
next port-channel will be numbered (could be Po102, Po201 etc). For a given
‘network service’, we have to track many similar variables: Vlan numbers, Vrf numbers,
HSRP group numbers, subinterface numbers, AS numbers…. The list goes on.
Now, in quick contrast, the compute folks have almost never had this problem.
Most automation in that space is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Stand up the VM&lt;/li&gt;
  &lt;li&gt;Install necessary middleware&lt;/li&gt;
  &lt;li&gt;Clone the app repo&lt;/li&gt;
  &lt;li&gt;Fire up the app&lt;/li&gt;
  &lt;li&gt;Ensure compliance&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;what-about-ip-addresses&quot;&gt;What about IP addresses:&lt;/h2&gt;
&lt;p&gt;Obviously, I am oversimplifying a bit, but the point remains that, there really
isn’t much state tracking, when it comes to application/OS admin automation.
Back in the day (actually, less than 10 yrs ago), I remember when
compute/application admins were very fond of static IP addresses.
That used to be ‘stateful’ variable they needed tracked. Not any more.
Unfortunately, on the network side, we are still very dependent (depending on the use
case) on static IP addressing for our devices. Needless to say a solid IPAM
is an extremely important stateful variable tracker for network
automation. The reason for this blog post is, however, to address the
“other” variables (vlan numbers, vif numbers et al), we need for
network automation, that doesn’t really come built into standard,
‘network focused’ software, like IPAMs/CMDB&lt;/p&gt;

&lt;h2 id=&quot;an-implementation-example-using-nsot&quot;&gt;An implementation example using NSoT:&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/dropbox/nsot&quot;&gt;NSoT&lt;/a&gt; is an opensource
IPAM(primarily) from the folks at dropbox. Last year at the NetDevOps
workshop at Interop,  &lt;a href=&quot;https://twitter.com/jathanism&quot;&gt;Jathan&lt;/a&gt; demo’ed
the product. It had 2 things that caught my attention:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It was written with an API first approach&lt;/li&gt;
  &lt;li&gt;It was written in python (a language that I am least uncomfortable
in :) )&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I forked the repo and implemented the “Iterables” API, with a lot of
guidance and support from Jathan. We have since, internally, used my
implementation of NSoT, to prove out quite a few automation scenarios.&lt;/p&gt;

&lt;h2 id=&quot;iterables---a-visualization&quot;&gt;Iterables - A visualization:&lt;/h2&gt;
&lt;p&gt;My implementation of the stateful variables, involves 2 tables. One
table tracks the variable that needs to be iterated (vlans numbers,
vif numbers etc, along with the increment value). The other table
tracks all allocated values for a given variable.
My good friend &lt;a href=&quot;https://www.linkedin.com/in/bobbyoutlaw&quot;&gt;Bobby Outlaw&lt;/a&gt;
helped visualize the idea as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/iterables.png&quot;&gt;&lt;img src=&quot;/assets/iterables.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using NSoT as a backend, the above drawing visualizes various network
automation services, within a service provider. &lt;em&gt;Service A&lt;/em&gt; requires the
network automation system to keep track of a cryptomap sequence
number, tenant VRF number and a portchannel interface
number. Alternatively &lt;em&gt;Service B&lt;/em&gt; requires the automation system to
track the cryptomap sequence number and the tenant vrf number.
Each time we invoke the “playbook” for service A, we can now make API
calls to our NSoT backend, that will give us the next available unused
integer for the given variable.
This particular implementation, also gives you an unique &lt;em&gt;“Service
Key”&lt;/em&gt; each time you invoke the playbook. The idea behind it is; as a
service provider, you hand over the unique key to your customer as a
reference to the service request. If the customer wants the service
revoked or modified (pretty much any CRUD operation)  at a later date,
the service key can be used to identify all the values associated with
a particular service, and thus modified.&lt;/p&gt;

&lt;h2 id=&quot;demo-playbook&quot;&gt;Demo Playbook:&lt;/h2&gt;
&lt;p&gt;If you’d like to play around with the implementation, you can download
a copy &lt;a href=&quot;https://github.com/termlen0/nsot&quot;&gt;here&lt;/a&gt;. Please keep in mind
that you will have to follow
the
&lt;a href=&quot;https://nsot.readthedocs.io/en/latest/development.html&quot;&gt;developer guide&lt;/a&gt;
to compile from source. (Hopefully once the PR is approved, it should
be available for general consumption, directly from pip). Once you have NSoT running, you
should be able to grab
the &lt;a href=&quot;https://github.com/termlen0/nsot-tester&quot;&gt;iterable test playbook&lt;/a&gt;
to get an idea of how to use the stateful backend for your automation
playbooks.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Twitter:&lt;/em&gt; &lt;a href=&quot;https://twitter.com/intent/tweet?url=http://localhost:4000/2016/12/28/observations/&amp;amp;text=The need for a stateful variable tracker and an implementation example&amp;amp;via=termlen0&quot; target=&quot;_blank&quot;&gt; Share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/termlen0&quot;&gt;
  Follow me on Twitter&lt;/a&gt;!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Running ansible at scale</title>
   <link href="http://localhost:4000/2016/12/16/observations/"/>
   <updated>2016-12-16T00:00:00-05:00</updated>
   <id>http://localhost:4000/2016/12/16/observations</id>
   <content type="html">&lt;p&gt;Last week I deployed my first “at scale” playbook. The overall objective was simple: Add new dhcp helper address to about 400 switches.
Like most things though, the devil is in the details. Right off the bat, I ran into “non-ansible” related issues (tacacs/ssh).
That brought the number of devices to about 270. Not a big number right?
At the most basic level, yes, if I was simply pushing configs using the ios_config
module.
##Breakdown of the playbook&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Execute a show run on the device and compile a local backup for each device&lt;/li&gt;
  &lt;li&gt;Run a pre-flight report, specific to the interfaces we are going to impact (multiple ssh sessions per host)&lt;/li&gt;
  &lt;li&gt;Build the configs locally&lt;/li&gt;
  &lt;li&gt;Deploy the configs&lt;/li&gt;
  &lt;li&gt;Validate the configs/Unit testing&lt;/li&gt;
&lt;/ol&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;a-bit-more-about-the-unit-testing&quot;&gt;A bit more about the unit testing:&lt;/h3&gt;
&lt;p&gt;For testing the changes were deployed, I had 2 criteria:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Assert that the new helpers are present within the interface configurations (of the specific interfaces)&lt;/li&gt;
  &lt;li&gt;Assert that the startup and running config are in sync (in other word, the new config has been saved)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For assertion 1, I took the approach of running a show running interface per interface - this implied multiple ssh sessions per host.&lt;/p&gt;

&lt;p&gt;##Observations:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Running the playbook for backups result in a lot of SSH connection failures on the first run. Subsequent runs are significantly more successful - Still see some failures&lt;/li&gt;
  &lt;li&gt;Running the playbook for the preflight report/validation, results in ssh timeouts - these are not consistent across hosts: Meaning, for the same host, the show run int
 for Vlan101 will work but might fail for Vlan201 on the first run, but on the next run, there is no guarantee that a repeat play will reproduce this exact failure&lt;/li&gt;
  &lt;li&gt;My validation role uses dynamic includes like this &lt;a href=&quot;https://github.com/termlen0/ansible_dynamic_include_bug_demo&quot;&gt;example&lt;/a&gt;. Running the playbook with a tag other
than “validate”, still attempts to load all yaml files and results in failure.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;##Tweaks and next steps:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;I had mixed success with using the “serial” &lt;a href=&quot;http://docs.ansible.com/ansible/playbooks_delegation.html#rolling-update-batch-size&quot;&gt;option&lt;/a&gt;. Needs more trial and error.&lt;/li&gt;
  &lt;li&gt;Rewrite pre-flight and validation scripts to only do a single show run. Collect specific interface details from a local copy&lt;/li&gt;
  &lt;li&gt;Tried pipelining and some other recommendations that seemed relevant based on &lt;a href=&quot;https://www.ansible.com/blog/ansible-performance-tuning&quot;&gt;this&lt;/a&gt;.
However, it appears to be focussed on using ssh connections to the remote systems. As we know, for the ios_* modules, ansible ssh’es to the local host and then uses paramiko
within the modules. In short, pipeline did not seem to do much&lt;/li&gt;
  &lt;li&gt;Setting the timeout parameter for the ios_* modules seemed to have no affect on the ssh timeouts.&lt;/li&gt;
  &lt;li&gt;To further understand observation 1 (which is still the most vexing one), I tried connecting to the device using paramiko from the python interpreter and executing
the same commands. I could not recreate the issue. I had good connectivity each time&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;##Other issues:
For observation 3, I opened an &lt;a href=&quot;https://github.com/ansible/ansible/issues/19345&quot;&gt;issue&lt;/a&gt; with ansible. Based on the comments it was closed with, I guess, it is an expected
behavior. Which means, for any playbook that has dynamic includes, we need to remember to send any variables that role will need, even though your tags may not be calling
that role.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Twitter:&lt;/em&gt; &lt;a href=&quot;https://twitter.com/intent/tweet?url=http://localhost:4000/2016/12/16/observations/&amp;amp;text=Running ansible at scale&amp;amp;via=termlen0&quot; target=&quot;_blank&quot;&gt; Share it with your followers&lt;/a&gt; 
or 
&lt;a href=&quot;https://twitter.com/termlen0&quot;&gt;
  Follow me on Twitter&lt;/a&gt;!&lt;/p&gt;

</content>
 </entry>
 

</feed>
